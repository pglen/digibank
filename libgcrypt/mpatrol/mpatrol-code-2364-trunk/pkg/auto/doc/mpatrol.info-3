This is mpatrol.info, produced by makeinfo version 4.13 from
mpatrol.texi.

INFO-DIR-SECTION Programming tools
START-INFO-DIR-ENTRY
* mpatrol: (mpatrol).           The mpatrol library.
END-INFO-DIR-ENTRY

   This file documents mpatrol, a library for controlling and tracing
dynamic memory allocations.

   Copyright (C) 1997-2008 Graeme S. Roy
<graemeroy@users.sourceforge.net>

   This is edition 2.17 of the mpatrol manual for version 1.5.1, 19th
December, 2008.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Free Software Foundation.

   All product names mentioned in the documentation and source code for
this library are the trademarks of their respective owners.


File: mpatrol.info,  Node: Netware notes,  Prev: Windows notes,  Up: Notes

I.5 Notes for Netware platforms
===============================

There doesn't appear to have been any interest in the Netware version
of mpatrol and as a result I will not be implementing any of the
following features (or fixing any of the following problems) in mpatrol
for Netware.  I don't even have access to a Netware machine so someone
else would have had to have done it anyway.

   * The library has not yet been built (let alone tested) on Netware
     platforms.  The names of the system functions that the library
     calls for Netware were obtained by looking at Novell's developer
     documentation, so they may not even compile correctly without
     modification.

   * Need to add support for building the mpatrol library as an NLM.
     This is not currently a high priority requirement as the archive
     library should suffice for most purposes.  However, if it is built
     as an NLM and `malloc()' and related functions are dynamically
     linked in some executable files then perhaps it would be possible
     to override these functions, thus getting the `--dynamic' option
     in the `mpatrol' command to work.

   * Need to add support for processors other than the Intel 80x86.
     However, about 99% of Netware platforms run on this processor
     family -- does anyone really use Netware with other processors?

   * Need to add way to determine when the base of the stack has been
     reached during call stack traversal, since on Netware every
     application is really a thread running under one large process.

   * Need to add support for reading symbols from Netware load modules.
     Also need to add support for reading symbols from any NLMs that
     are required by the program.  This may be possible in a limited
     fashion by using the GNU BFD library, but may only work with code
     compiled with `gcc'.

   * Could add support for the `EDIT' and `LIST' options.  This would
     probably involve finding a way to invoke a batch file without
     having to search for the batch file or allocating memory in the
     process.

   * Add GUI support for the `mptrace' command.

   * Need to investigate if it is safe (or even possible) to override
     the definitions of `malloc()', etc., without including the
     `mpatrol.h' header file first.  Currently, non-macro definitions
     for these functions have been disabled in the Netware version of
     the library in case they affect other NLMs that are currently
     running.


File: mpatrol.info,  Node: Frequently asked questions,  Next: Related software,  Prev: Notes,  Up: Top

Appendix J Frequently asked questions
*************************************

This section contains frequently asked questions about the mpatrol
library and their corresponding answers or solutions.

* Menu:

* Documentation::               Formatting, converting and printing.
* Building::                    Compiling with the mpatrol library.
* Linking::                     Linking with the mpatrol library.
* Running::                     Running with the mpatrol library.
* Files::                       Different types of files.


File: mpatrol.info,  Node: Documentation,  Next: Building,  Up: Frequently asked questions

J.1 Documentation
=================

  1. I can't seem to format the TeXinfo manual for mpatrol into
     anything that I can view or print.  What am I doing wrong?

     You'll need to have the appropriate document formatting programs
     installed on your system before you can do this, and even then
     you'll also need to have suitable software for viewing or printing
     the formatted documents.  The mpatrol distribution should already
     contain the latest mpatrol manual in a variety of formats and
     should also contain a file telling you where to get programs that
     can be used to view or print these files.  Alternatively, you can
     browse the latest mpatrol manual on-line at
     `http://sourceforge.net/projects/mpatrol/'.

  2. I'd like to convert the mpatrol manual to a different
     documentation format but there is no support for that format in
     the `Makefile'.  How would I go about doing this?

     Since TeXinfo is intended to be converted to other documentation
     formats it should be fairly easy for you to find a tool which will
     convert it into your desired format.  Please note that I probably
     won't provide preformatted versions of the mpatrol manual in any
     other format which isn't already supported.

  3. Why is the reference card not centred in the middle of the page
     when I print it?

     The reference card has three columns in landscape format and as a
     result requires smaller margins than LaTeX normally uses.  When
     `dvips' converts the DVI file to a postscript file it refers to a
     configuration file set up for a specific printer so that it knows
     what that printer's capabilities are.  However, you can instruct
     `dvips' to offset the page by a given amount with the `-O' option
     so that it appears centred when printed.  I find that `-O
     -0.75in,0.25in' works for me.  Note that the default paper size
     for the reference card is DIN A4, but you can change it to US
     letter in the LaTeX source file.

  4. How do I install the mpatrol manual as a GNU info file?

     Assuming you have the GNU info file built and copied to your
     system's info file directory, you should use the `install-info'
     command to place an entry for mpatrol in your system's GNU info
     directory file, otherwise the GNU info reader may not be able to
     locate the mpatrol entry.  You may also need to modify your
     `INFOPATH' environment variable if you installed the GNU info file
     in a non-standard place.

  5. How do I install the mpatrol manual pages?

     This is very system-dependent, but need only be done on UNIX
     systems since they cannot be used on other platforms.  The
     unformatted manual pages exist in `man/man1' and `man/man3' and
     should be copied to your system's manual page directory.  If you
     don't have the `nroff', `troff' or `groff' commands installed on
     your system then you may also need to copy the formatted manual
     pages, located in `man/cat1' and `man/cat3'.  You may also need to
     modify your `MANPATH' environment variable if you installed the
     manual pages in a non-standard place, and some systems require you
     to update the _whatis_ database after installing new manual pages,
     by running `makewhatis', `catman' or equivalent.

     Alternatively, the mpatrol manual pages can be built in a variety
     of different documentation formats that can be viewed or printed
     without the need for a `man' command.  If you have the correct
     tools installed on your system then you should be able to do this
     by examining the `Makefile' in the `man' directory.  The mpatrol
     distribution should already contain the latest mpatrol manual
     pages in a variety of formats and should also contain a file
     telling you where to get programs that can be used to view or
     print these files.

  6. Why does the `libmpatrol.3' manual page not display correctly when
     I view it with the `man' command?

     This is likely to be due to the `tbl' command not being run to
     process the tables when the `man' command displays the manual
     page.  Many UNIX systems look at the first line of the manual page
     to see what filters to run the page through before it is
     displayed, but some systems do not recognise this and instead rely
     on an environment variable such as `MANROFFSEQ' to specify which
     filters are to be run.  Look at the manual page for the `man'
     command on your system to find out more information.


File: mpatrol.info,  Node: Building,  Next: Linking,  Prev: Documentation,  Up: Frequently asked questions

J.2 Building
============

  1. Why does the `Makefile' assume that I am building mpatrol on
     platform X when I am really building on platform Y?

     The `src/config.h' and `src/target.h' header files attempt to
     obtain as much information from the compiler as possible, mainly
     from any predefined preprocessor macros that it defines during
     compilation.  If this information is incorrect then you can
     override the `TARGET', `SYSTEM', `ARCH', `ENVIRON', `FORMAT' and
     `DYNLINK' preprocessor macros defined in `src/target.h' to suit
     your particular system by explicitly defining them in `CFLAGS'
     within the `Makefile' when you build mpatrol.  You could also
     choose to build different versions of mpatrol with different
     settings of `ENVIRON', `FORMAT' or `DYNLINK' on a single system if
     you wish to by changing `ENVIRON', `FORMAT' or `DYNLINK' for
     different builds.

  2. The processor family I am compiling on supports both 32-bit and
     64-bit modes of operation.  How do I specify which I want?

     You will have to look at the documentation for the compiler you
     are using in order to find out how to specify which operating
     environment you wish to target.  For example, if you are using the
     Sun C compiler on a SPARC V9 Solaris machine then you should
     specify the `-xarch=v9' option in the `Makefile' when you are
     building mpatrol in order to target the 64-bit environment.  If
     you think that you are already using the correct option, but the
     mpatrol code is still being built to support the wrong environment
     then you could try explicitly setting the `ENVIRON' preprocessor
     macro in the `Makefile'.

  3. I cannot include `mpatrol.h' from my C++ source code as I get lots
     of compilation errors.  Why is this and what can I do to prevent
     them?

     The most likely reason that you are getting errors is because you
     are calling placement `new', and the way that mpatrol derives
     source information from calls to `operator new' is by defining a
     macro called `new', thus causing lots of problems when calling
     placement `new' or explicitly calling `operator new'.  You can
     either try not to use placement `new' or you can define the
     preprocessor macro `MP_NOCPLUSPLUS' when compiling your source
     file, which will disable the overriding of any C++ operators in
     `mpatrol.h'.  Alternatively, if you define `MP_NONEWDELETE' then
     you can use `MP_NEW', `MP_NEW_NOTHROW' and `MP_DELETE' in order to
     call the mpatrol versions of the C++ operators.

  4. I still have the above problem, but I don't think it's due to
     placement `new' since the compiler complains about `operator
     new[]', so could that be a clue?

     Yes.  The most likely reason is that the C++ compiler does not
     support the array `new' and `delete' operators.  These were
     introduced some time before the standardisation of the C++
     language but some compilers may not yet have support for them.  It
     may be that you have to use a special compiler option to enable
     support for these operators, but if not you will probably have to
     edit `mpatrol.h' to temporarily allow your files to compile.

  5. I tried both of the above suggestions, but I still can't get my
     C++ source code to compile.  I'm using an old C++ compiler so
     could that be a problem?

     Yes.  The `mpatrol.h' header file defines new versions of the C++
     dynamic memory allocation operators using exceptions and
     namespaces as required by the ANSI C++ standard.  If your C++
     compiler has no support for these then you should compile your C++
     source files with `MP_NOCPLUSPLUS' defined.  You may also be using
     an older C++ library in which the `new' header file does not
     define `set_new_handler()' to be in the `std' namespace.  You will
     then have to change the `mpatrol.h' header file and `cplus.c'
     source file accordingly.

  6. I'm calling `operator new' (not the _nothrow_ version) from my C++
     source code but when my program runs out of memory the `OUTMEM'
     error is given in the mpatrol log file rather than throwing a
     `std::bad_alloc' exception.  Why is this?

     Sounds like the mpatrol library was built with a C compiler.  In
     order for the mpatrol versions of `operator new' and `operator
     new[]' to throw an exception when they run out of memory, the
     mpatrol library must have been built with a C++ compiler.  The
     `OUTMEM' error is only given when there is no way to throw an
     exception.

  7. Why am I unable to call the mpatrol version of `alloca()'?  I only
     ever seem to call the default version.

     Most implementations of the `alloca()' function are compiler
     builtins which will be converted to inline assembler or object
     code in order for them to be able to dynamically modify the
     calling function's stack frame at run-time.  As a result, the call
     to `alloca()' is recognised as an intrinsic keyword and is dealt
     with specially by the compiler.  However, if this can be
     intercepted by the preprocessor before the compiler parses the
     source code then the call can be redirected to another function.
     This is one of the functions of the `mpatrol.h' header file, which
     means that it must be included before the first call the
     `alloca()'.  If `alloca.h' is also being included then `mpatrol.h'
     must be included after it, otherwise it may redefine `alloca()'
     back to the default version.

  8. Why do some of the `Makefile's contain the `-fno-inline-functions'
     option as part of `OFLAGS'?

     The `-fno-inline-functions' option is a `gcc'-specific option
     which instructs the compiler not to inline any functions.  This is
     necessary on some platforms where function call stack traversal is
     supported, since function inlining may significantly alter the
     layout of a program's stack.  Normally this option is only
     required when building the mpatrol library, but on some platforms
     function call stack traversal may not work properly unless this
     option (or equivalent) is used for all compiled code.

  9. What does the `MP_ALIGN' definition in `mpatrol.h' do?

     It is a preprocessor macro function that is used to return the
     minimum alignment in bytes required for a specified type at
     compile-time.  It is used in the `MP_MALLOC' family of functions
     to specify the required alignment of the memory allocation that is
     to be used to store the specified type.  Some compilers provide a
     built-in function that can be used to determine the minimum
     alignment of a type at compile-time.  For all others, this macro
     makes use of some structure trickery in combination with the
     `offsetof' macro.

 10. What does the `MP_INLINE' definition in `mpatrol.h' do?

     It is used in the definition of the debugging versions of the C++
     operators in `mpatrol.h' so that they are inlined correctly.  We
     want to define the C++ operators so that they will be inlined in
     every source file that uses them and also not clash with the
     versions defined in the mpatrol library or the standard C++
     library.  Traditionally, this is done by defining them to be
     `static inline', which means that any non-inlined definition will
     be local to each object file.  An even better technique is
     available with the new C++ standard which allows `extern inline'
     definitions, meaning that no definition will be available if the
     function is not inlined.  Unfortunately, if optimisation is turned
     off in the compiler then no inlining will usually be performed and
     so the definitions will be real functions.  Luckily, on ELF
     platforms the `extern inline' function definition will have a weak
     visibility and so will not clash with library functions.

 11. Why do I get different stack traces in the mpatrol log file from
     the C++ operators in `mpatrol.h' when optimisation is turned on
     and off in the compiler?

     When the compiler is optimising it will invariably be performing
     inlining, in which case each inlined function will share the stack
     frame of its caller when it is called -- the mpatrol library
     cannot detect this.  In order to cope in both situations, the
     non-inlined case will contain the name of the C++ operator at the
     top of its stack, even though it will be removed in the inlined
     case.

 12. How do I build the `mptrace' command with GUI support?

     The GUI support for the `mptrace' command is currently written to
     use Motif and X Windows and so can only be built on systems with
     these libraries and run on systems with an X server.  This will
     most likely be possible only on UNIX platforms.  LessTif can be
     used instead of Motif if that is all that is available on your
     system.  The UNIX `Makefile' has a macro called `GUISUP' which can
     be set to `true' or `false' depending on whether you wish to have
     GUI support or not.  The default is `false'.  GUI support is
     automatically enabled on platforms that support it if the
     `configure' script in `pkg/auto' is used.

 13. How do I build the `mptrace' command without GUI support?

     This is done by default on most platforms when using the
     `Makefile's in the `build' directory.  However, if for some reason
     that is not the case then on UNIX platforms you will have to set
     the `GUISUP' `Makefile' macro to `false' when compiling `mptrace'.
     You might need to do this if your UNIX system does not have the
     correct header files and libraries installed needed for GUI
     support.  If you are using the `configure' script in `pkg/auto'
     then GUI support will be automatically disabled on platforms that
     do not support it, but you can force it to be disabled by using the
     `--without-x' option.


File: mpatrol.info,  Node: Linking,  Next: Running,  Prev: Building,  Up: Frequently asked questions

J.3 Linking
===========

  1. Why do I get undefined symbols when linking with the mpatrol
     library?

     This is most likely caused by the mpatrol library requiring
     additional symbols defined in an object file access library.  If
     mpatrol was built with `FORMAT=FORMAT_COFF' or
     `FORMAT=FORMAT_XCOFF' then you'll need to add `-lld' (or
     equivalent) to the compiler command line straight after
     `-lmpatrol'.  If mpatrol was built with `FORMAT=FORMAT_ELF32' or
     `FORMAT=FORMAT_ELF64' then you'll need to add `-lelf' (or
     equivalent) to the compiler command line straight after
     `-lmpatrol'.  If mpatrol was built with `FORMAT=FORMAT_BFD' then
     you'll need to add `-lbfd -liberty -lintl' (or equivalent)
     instead.  If you are using the thread-safe version of mpatrol then
     you may also need to link with the system threads library.

  2. Why do I still get undefined symbols on HP/UX, IRIX, Tru64 or
     Windows platforms, despite following the above instructions?

     If the symbol is called `U_get_previous_frame' on HP/UX then you
     still need to link with the system stack traceback library,
     `libcl.sl'.  If the symbols are called `exc_setjmp' and `unwind'
     on IRIX or Tru64 and you defined the `MP_LIBRARYSTACK_SUPPORT'
     preprocessor macro when building the mpatrol library then you
     still need to link with the system exception library, `libexc.so'.
     If the symbols all begin with `Sym' on Windows platforms then you
     still need to link with the system symbol access library,
     `imagehlp.lib'.

  3. I tried all of the above, but why is the `SymGetLineFromAddr'
     symbol still undefined on Windows platforms?

     This is due to the `imagehlp.lib' or `imagehlp.dll' libraries on
     your system being out of date.  The `SymGetLineFromAddr()'
     function was added to this library at a much later date from the
     original release so if you want the `USEDEBUG' option to work you
     should try to get an updated library from Microsoft.
     Alternatively, you can disable the call to it in
     `__mp_findsource()' but the `USEDEBUG' option will no longer work.

  4. Why is the mpatrol library unable to read any symbols from DLLs
     despite the fact that my program uses them?

     Windows executable files and DLLs only contain a list of symbol
     names which are imported and exported but do not contain details
     of such symbols at the same level as object files.  To do this
     requires the symbolic information to be retained by the linker,
     but this has not been done for the system DLLs.  The mpatrol
     library uses the imagehlp system library to read symbols from DLLs
     but this will only work if the required system debugging symbols
     are installed on your machine.  In Visual C++, this can be done by
     selecting the `Windows NT Symbols Setup' start menu item.

  5. Why do I get duplicate definitions of symbols when linking with
     the mpatrol library?

     This is most likely caused by your code, or a library, providing
     definitions of `malloc()' and `free()' which conflict with those
     defined in the mpatrol library.  You'll need to disable these in
     order to perform a successful link and use the replacements in
     mpatrol instead.

  6. Why do I get `xmalloc()' as a multiply-defined symbol when I link
     with the archive version of the mpatrol library?

     If the mpatrol library was built with `FORMAT=FORMAT_BFD' then it
     is because the libiberty library contains definitions of the
     `xmalloc()' family of functions as well.  You should rebuild the
     mpatrol library without the definitions of the relevant
     `xmalloc()' functions in `malloc.c'.  You're also likely to get
     this error if you link with the archive version of the mpatrol
     library and one or more of the `xmalloc()' family of functions is
     defined in another archive library that you are linking with.

  7. I linked my program to a shared library version of mpatrol.  Now,
     when I try to run my program, the system complains that it cannot
     find the mpatrol library.  How do I get this to work?

     You need to tell the system where to find the shared library
     version of the mpatrol library, either by setting your
     `LD_LIBRARY_PATH' environment variable (or just `PATH' on Windows
     platforms), or by embedding the full path to the library into the
     executable when you link your program by setting the `LD_RUN_PATH'
     environment variable.

  8. I linked my program to a shared library version of mpatrol.  Will
     future releases of mpatrol remain compatible with this version or
     will I have to relink my program?

     Backwards compatibility is not generally guaranteed, but should be
     preserved if only the bug fix part of the mpatrol version number
     has changed, with the major and minor versions staying the same.
     For example, versions 1.0.3 and 1.0.8 should be compatible, but
     upgrading to version 1.1.0 may require a relink.

  9. I have linked my program with the DLL version of the mpatrol
     library on Windows but it crashes when I run it.  I suspect that
     the crash is occurring when the mpatrol library is being
     initialised, so what is going wrong?

     There appears to be a problem when using the mpatrol DLL and the
     static version of the Microsoft C run-time library, and also a
     problem when using the static version of mpatrol and the Microsoft
     C run-time library DLL.  Luckily, if you ensure that you use
     either both static libraries or both DLLs at the same time then
     the problem should go away.  There doesn't seem to be an easier
     way around it at this time or, for that matter, an explanation for
     why it happens.

 10. Why are mpatrol library functions not called from shared libraries
     on AIX?

     AIX uses static shared libraries instead of dynamic shared
     libraries, which means that all shared library bindings are
     resolved at link time rather than load time (i.e. you must specify
     which shared libraries resolve all of the undefined symbols that
     result when building a shared library).  If you would like mpatrol
     library functions to be called from a shared library, you must
     rebuild the shared library with `-lmpatrol' on the link line.
     However, this means that you cannot override `malloc()', etc., in
     shared libraries that you cannot rebuild unless you link
     statically with the archive library versions instead.


File: mpatrol.info,  Node: Running,  Next: Files,  Prev: Linking,  Up: Frequently asked questions

J.4 Running
===========

  1. I've just linked and run my program with the mpatrol library, but
     the resulting log file doesn't contain any useful information.
     Why does it not contain a list of all memory transactions or show
     any unfreed memory allocations?

     By default, the mpatrol library will only write a summary of
     library settings and statistics to the log file, and that will
     only occur on successful program termination (i.e. when `exit()'
     is called).  If this does not appear then it is likely that your
     program (or some other library function) called `abort()' due to a
     fatal error.  However, there are a multitude of different options
     that you can pass to the mpatrol library via the `MPATROL_OPTIONS'
     environment variable that will allow you to control what is logged
     and what is not.  Note that the `mpatrol' command will always log
     all calls to allocate, reallocate and free memory by default.

  2. Why does my C++ program crash at program termination when it is
     linked with the mpatrol library and it appears to be doing nothing
     wrong?

     If your program contains file-scope objects whose constructors get
     called before `main()' and whose destructors get called after
     `main()' then it is likely that one of these destructors is
     allocating memory after the mpatrol library has terminated.  This
     should already be resolved if you built the mpatrol library on a
     platform that supports `.init' and `.fini' sections or if you
     built it with the GNU compiler or a C++ compiler.  However, in
     certain circumstances this may not work so you may wish to try
     terminating the mpatrol library by getting it to register itself
     with `atexit()' instead, which will hopefully resolve the problem.
     You can do this by rebuilding the mpatrol library with the
     `MP_USE_ATEXIT' preprocessor macro defined.

  3. I linked my program with the mpatrol library to trace all of its
     memory operations, such as `memcpy()' and `memcmp()', but I get
     nothing in the log file.  Why is this?

     On systems that do not support `.init' and `.fini' sections or are
     not `gcc' or C++ based then the memory operation functions will not
     automatically initialise the mpatrol library since on many systems
     the startup routines call them very early on.  On such systems, if
     your program does not call any memory allocation functions to
     initialise the mpatrol library then you must explicitly call the
     `__mp_init()' function.  All memory operation functions following
     that call with then be traced.

  4. Why does the `USEDEBUG' option not work for me?

     Firstly, you have to ensure that you have built the mpatrol
     library with support for the GNU BFD object file access library by
     compiling with the `FORMAT=FORMAT_BFD' preprocessor macro
     definition, or you are running on a Windows platform.  Secondly,
     you have to ensure that you have compiled all relevant object
     files with debugging information enabled (usually by adding an
     option to the compiler command line), although the mpatrol library
     does not need to be compiled this way.  The file and line number
     information will hopefully then appear in the log file for all
     symbols that have associated debugging information.  If none of
     the above suggestions work, you may still be able to get this
     information with the `mpsym' command.

  5. Why does the `mpatrol' command ignore the current value of the
     `MPATROL_OPTIONS' environment variable?

     Because I would most likely get lots of bug reports or queries
     from people who had forgotten that they had set some options in
     the environment variable and had then not seen the expected
     behaviour from the options they specified to the `mpatrol'
     command.  Recently, though, I've added the `--read-env' option so
     that this can be achieved.

  6. Why do I get an error from the dynamic linker about not being able
     to locate `libiberty.so' and `libintl.so' when I use the
     `--dynamic' option with the `mpatrol' command?

     The GNU libiberty and libintl libraries are required when the
     mpatrol library is built with support for the GNU BFD library but
     are unfortunately only available in archive form on many systems.
     See the section on the `mpatrol' command (*note The mpatrol
     command::) for information on how to get around this problem,
     either by embedding these libraries into the mpatrol library when
     you are building it, or by converting the archive forms of these
     libraries into their corresponding shared library versions.

  7. Why does the mpatrol library not read the symbols in my executable
     file on Windows platforms?

     If the mpatrol library was compiled with the `FORMAT=FORMAT_IMGHLP'
     preprocessor macro defined then you must ensure that you compile
     your files with debugging information enabled (using the `-Z7' or
     `-Zi' options in Visual C++) and that you tell the linker that you
     wish to preserve the debugging information in the executable file
     (using the `-debug' and `-pdb:none' options in the Microsoft
     linker).  Unfortunately, if you do not do this then the final
     executable file will not have a symbol table and so the mpatrol
     library cannot give symbolic stack tracebacks.

  8. Why do some mpatrol log file entries only contain a partial call
     stack rather than following the function call stack back to the
     call to `main()'?

     This could be because the mpatrol library was compiled with
     limited call stack traversal support via the
     `MP_BUILTINSTACK_SUPPORT' configuration macro.  However, it could
     also mean that the mpatrol library encountered a corrupt frame
     pointer when traversing the call stack and had to terminate the
     recursion.  The frame pointer _must_ be preserved from function to
     function on most platforms, otherwise the stack cannot be
     traversed.  See your compiler manual for further details.

  9. I am trying to use the `mpatrol' command to debug an executable
     file that was not originally compiled with the mpatrol library.
     However, even though it runs successfully, no mpatrol log file is
     produced.  Why is this?

     First, check that you are passing the `--dynamic' option to the
     `mpatrol' command and, if necessary, the `--threads' option as
     well.  If that doesn't work then check that the executable file
     has been dynamically linked; statically linked executables cannot
     be forced to use the mpatrol library.  If it still doesn't work
     then it may be that the dynamic linker on your system doesn't have
     the ability to preload any shared libraries that have been
     specified in a special environment variable, in which case you
     can't use this feature.

 10. I am attempting to run a multithreaded C++ program with the
     mpatrol library on Linux.  However, my program crashes before
     `main()' and the debugger shows that the failure is in
     `__sigaction()' which is called from `__mp_initsignals()'.  Is the
     fault with the mpatrol library?

     There have been many reports of this problem and it turns out to
     be an issue with shared library dependencies.  ELF shared
     libraries may contain initialisation functions that are executed
     before `main()'.  However, sometimes the order in which these
     functions are executed is critical.  In this case it is likely
     that the mpatrol and pthreads libraries are being initialised in
     the wrong order.  You must ensure that `-lpthread' appears near the
     very end of the link line after all user libraries, and you must
     also ensure that none of the user libraries have a dependency on
     `libpthread.so'.  You can verify this by running the `ldd' command
     on them.

 11. I know that there's a definite heap corruption problem in my
     program as it keeps crashing in unrelated code due to pointer
     corruption, and when I link with the mpatrol library it stops
     crashing.  What can I do?

     Try as many of the relevant mpatrol run-time options as possible
     and make sure that you closely examine the mpatrol log file for
     warnings and errors -- your problem may have been noticed by the
     mpatrol library but it may not have considered it a fatal error
     and continued execution.  If this still doesn't show up anything
     then you can probably rest assured that you have a memory
     corruption problem but you may need to use a commercial product
     such as Purify to isolate it.  If that fails then you'll just have
     to employ the traditional debugging method of single-stepping
     through your program in a debugger until something unusual or
     unexpected happens.

 12. If I link my program to version 1.0 of the mpatrol library then I
     cannot interrupt it using the keyboard, which I would normally be
     able to do without using mpatrol.  Is this a bug?

     Not really, but it is undesirable behaviour in most cases, which
     is why it was removed in later releases of mpatrol and replaced
     with the `SAFESIGNALS' option.  The reason that the program could
     not be interrupted using the keyboard was that mpatrol would
     ignore such signals when its library code was being executed,
     otherwise user-defined signal handlers that used `malloc()' and
     related functions would have the capability to cause lots of
     undesirable side effects.  However, this does not normally happen,
     which is why the behaviour was moved to an option for those that
     needed it.

 13. Why does mpatrol not report an illegal memory access when it can
     be detected by a debugger?

     First of all, illegal memory accesses can only be detected on
     systems that support virtual memory, so that precludes AmigaOS and
     Netware.  Secondly, it might be possible that something is
     overriding the illegal memory access handler that mpatrol sets up
     when it is first initialised.  If your program, or an external
     library, sets up a signal handler that handles `SIGBUS' or
     `SIGSEGV' (or their equivalent on Windows platforms) then mpatrol
     will no longer be able to catch illegal memory accesses.  You can
     either try to live with that, or you could try disabling the
     overriding handlers.

 14. How do I set a breakpoint on the `malloc()' function when it is
     implemented as a preprocessor macro in `mpatrol.h'?

     There are four different mpatrol interface functions which are
     used to allocate memory, duplicate strings, reallocate memory and
     deallocate memory.  If you look in `mpatrol.h' you should be able
     to see the name of the function that will be called when the macro
     is invoked.  The same goes for the memory operation functions.

 15. I've linked and run my program with mpatrol under UNIX and it uses
     a large amount of heap memory.  However, it crashes near the end
     of execution and then proceeds to freeze up the whole system,
     sometimes requiring a reboot.  What am I doing wrong?

     The most common possible explanation for this is that you are
     running your program with too much access to system resources.
     What is likely to be happening is that when your program crashes
     the system attempts to dump the entire process image to a core
     file for later debugging in a non-symbolic debugger.  If the
     process has a huge heap then the core file is also going to be
     huge, thus resulting in a massive file that may lead to the system
     thrashing while it attempts to write it to the disk.  Technically,
     the system has not frozen, but it is likely to take a long time to
     finish writing the file.  The best solution involves setting your
     program's maximum core file size to a reasonable limit (or just
     zero), and also possibly limiting your program's maximum data
     segment size as well.  These can be set from the shell but the
     exact details on how to do this differ between shells.

 16. Why does my program run so slowly after I link it with the mpatrol
     library?

     Normal malloc libraries are optimised for speed but will typically
     fall over at the slightest hint of an error.  Debugging malloc
     libraries are written to provide as much debugging information as
     possible whilst performing a multitude of additional checks, which
     is why they may run much slower.  However, you can control which
     checks are performed (and when) by using the `MPATROL_OPTIONS'
     environment variable.  Performance may also be lost if you make
     lots of small memory allocations rather than fewer larger
     allocations, but that is mainly due to the overhead of storing the
     extra tracing details for each memory allocation.

 17. My program is written in C++ and is linked to the mpatrol library,
     but how do I go about demangling the C++ symbol names that are
     shown in the stack tracebacks in the resulting log file?

     Because there is no standard way of mangling C++ symbol names,
     various compilers and operating systems have taken different
     approaches to C++ name mangling, many of which differ
     significantly from the method suggested in _The Annotated C++
     Reference Manual_ by Margaret Ellis and Bjarne Stroustrup.
     However, most compilers come with a demangling tool which can be
     used in a command pipe to accept mangled names on its standard
     input file stream and demangle them on its standard output file
     stream, and so can be used to process the mpatrol log file.  Note
     that mpatrol automatically demangles C++ symbol names on Windows
     platforms as Microsoft's name mangling is quite unreadable and
     would be hard to demangle using a command line tool.

 18. Why does my program not stop when the mpatrol library notices an
     error?

     The library was written to give as much information as possible
     and so sometimes, when a non-fatal error is discovered, the
     library will write the error message to the log file and continue
     in the hope of being able to uncover more errors during the
     execution of the program.  This means that you should always check
     the number of warnings and errors given in the summary at the end
     of program execution, and then search backwards in the log file for
     `WARNING' or `ERROR'.

 19. I have linked my program with the mpatrol library on an Amiga or
     Netware machine, but when it runs it still crashes the entire
     system.  Why is this?

     AmigaOS and Netware do not have virtual memory and so do not have
     memory protection turned on by default.  This means that any rogue
     write to an erroneous address may actually overwrite the data of
     another process or perhaps even the operating system, thus
     bringing the entire machine down.  There are several third-party
     system utilities available for the Amiga to add memory protection
     to machines with built-in MMUs, which can then be used in
     conjunction with mpatrol.  I'm not sure about the availability of
     such software for Netware.

 20. I have built the mpatrol library with `gcc' on AmigaOS and have
     successfully linked it to my program.  However, why are none of
     the options in the `MPATROL_OPTIONS' environment variable
     recognised when I run it?

     The `getenv()' function in the GNU C library is not compatible
     with the AmigaDOS `SetEnv' and `GetEnv' commands since it does not
     treat environment variables as files located in `ENV:' and is only
     compatible with software that uses the ixemul library.  However,
     the `env' command that comes with most GNU software distributions
     allows you to set an environment variable that the GNU `getenv()'
     function can read when you are running in AmigaDOS.

 21. How do I suppress all diagnostic output from the mpatrol library?

     You can do this by setting the mpatrol log file to be your
     system's _bit bucket_, which is `/dev/null' on UNIX platforms and
     `NIL:' on AmigaOS.  There doesn't appear to be an equivalent way
     to do this on Windows or Netware.


File: mpatrol.info,  Node: Files,  Prev: Running,  Up: Frequently asked questions

J.5 Files
=========

  1. Why is there a `libmpatrol.o' target in the UNIX and Amiga
     `Makefile's?

     This is simply used to build the mpatrol library as one large
     object file for full incorporation into other libraries and was
     used during the development of mpatrol.  On UNIX platforms some
     linkers support the `-r' option for combining many object files
     into one large object file, but this is not universally supported,
     hence the reason for using the compiler instead.  Because all of
     the source files are compiled at once, there may be conflicts with
     system header files when `malloc()' and its related functions are
     being compiled, which is why such an object file is not built by
     default.  In addition, platforms which require the assembler
     routines in `machine.c' cannot build the mpatrol library as one
     large object file from `library.c'.  Note that the Windows and
     Netware `Makefile's use `libmpatrol.obj'.

  2. What are the `.svn' subdirectories that come with the mpatrol
     distribution?

     SVN is short for Subversion and is a project version control
     system.  All of the source files that comprise an mpatrol release
     are stored in a central Subversion repository so that previous
     releases can be easily retrieved, but the Subversion system needs
     to have a way of determining the versions of currently checked-out
     files, hence the `.svn' subdirectories.

  3. Why does the `mpsym' command not work for me?

     Firstly, you have to ensure that you have compiled all relevant
     object files with debugging information enabled (usually by adding
     an option to the compiler command line).  The file and line number
     information will hopefully then appear in the log file for all
     symbols that have associated debugging information when you run
     the `mpsym' command on the log file.  Alternatively, it could be
     that your system does not have `gdb' or any of the required UNIX
     text processing tools installed, in which case you might want to
     try installing them.

  4. How can I customise the `mpedit' command if I do not have the
     appropriate permissions to edit the file that was installed on my
     system?

     You just need to take a copy of the installed `mpedit' command and
     place it somewhere that will be picked up earlier on your command
     search path.  You can then edit your copy of the file and add
     support for your favourite text editor.

  5. What does the `mupdate' shell script do?

     This is for my use in order to automate every new release of
     mpatrol.  You should never need to run this script and it should
     not be installed anywhere on your system.  This script also uses
     and modifies the `VERSION' file and updates the `NEWS' and
     `ChangeLog' files.


File: mpatrol.info,  Node: Related software,  Next: References,  Prev: Frequently asked questions,  Up: Top

Appendix K Related software
***************************

The mpatrol library was designed to solve most common heap-related
problems, but there may be some cases where a different approach is
needed, or a commercial package is required.  I have attempted to
provide an overview of the different types of malloc libraries and
memory debuggers available below, along with a comprehensive list of
related software.

   The most basic type of heap debugging system simply requires the
redefinition of `malloc()', `realloc()' and `free()' (and related
functions) with debugging versions that record the file and line number
at which allocations occur.  This might require modifications to the
source code in order to call these new functions or it can be done
through preprocessor macros which will require all source files using
the memory allocation functions to be recompiled.  Such a system will
most likely live on top of the existing system malloc library, but will
provide an additional layer with which to store more information for
debugging purposes.  MEM by Walter Bright is a good example of this
type of library.

   On many operating systems it is usually possible to write
replacements for the normal memory allocation routines and place them
in a library so that they can be linked in to override the system
malloc library without requiring recompilation of any source files.
Such malloc libraries must take control of the heap directly and so
usually contain more features, including being able to track memory
leaks and place fence posts around allocations.  Dbmalloc by Conor P.
Cahill and Dmalloc by Gray Watson are two of the most popular of these
types of libraries since they are available on a wide range of
platforms.  Electric Fence by Bruce Perens also makes use of the memory
protection facilities found in UNIX systems in order to force programs
that access free or freed memory or read or write beyond the bounds of
a memory allocation to crash at the point that the illegal memory
access is made, rather than crashing at the next memory allocation.

   For debugging all memory access errors (not just those on the heap)
it is necessary to modify (instrument) the machine code that is to be
run so that each individual load from memory and store to memory will
be checked.  One method of doing this is to modify the code produced by
a compiler (such as is done by Checker written by Tristan Gingold) but
this has the disadvantage of only working within the object files that
have been produced by that compiler.  It is also possible to modify the
source code itself using source to source translation (such as is done
by Parasoft Insure++) or instrument all accesses to memory in assembler
source files (as performed by APurify written by Samuel Devulder).
However, both of these methods suffer from the same drawback as
compiler-generated instrumentation.  Yet another alternative is to wait
until link-time and then instrument the individual object files and
libraries before they are linked into an executable file.  This is
effectively what Purify from Rational Software does, although Memory
Advisor from PLATINUM Technology does roughly the same except that it
disassembles the object files into a platform-independent format before
instrumenting them.

   Rather than modifying a program in order to add debugging code, it
is sometimes possible to use a dedicated memory debugger in order to
quickly catch any problems.  ZeroFault from The Kernel Group debugs all
memory-related operations in a program while it is running, whilst
AProbe from OC Systems allows users to dynamically add probe modules at
run-time in order to locate errors or perform profiling.  If such a
memory debugger is not available for your system, you may still be able
to dynamically link a malloc library into your application at run-time
if the operating system supports it.  NJAMD by Mike Perry makes
extensive use of this feature on some UNIX systems.  On operating
systems that do not support virtual memory but have hardware memory
protection, it is sometimes possible to trap memory errors before they
bring down the whole system.  On the Amiga, Enforcer by Michael Sinz
runs in the background and detects many common memory access errors in
running applications, whilst on the Macintosh, QC by Onyx Technology
provides roughly the same functionality.

   A list of over ninety five different items of software which help in
debugging dynamic memory allocation problems is given below(1).  They
all provide some of the features that mpatrol contains and you may wish
to use one of them to solve your problem if you have trouble using
mpatrol.  I have only ever used CSRI malloc, Dbmalloc, Dmalloc,
Electric Fence and Mprof, so I can't vouch for any of the others,
although if you have any recommendations feel free to let me know so I
can add them to this list.  In particular, there seems to be a shortage
of such programs for Netware platforms.  Note that there is a
comparison of a few of the following programs at
`http://www.consistent.org/terran/memorycheck.shtml' which might help
illustrate the differences between the various tools.

   * AProbe
    Author
          OC Systems (<info@ocsystems.com>)

    License
          Commercial Software

    Platforms
          Various UNIX, Windows

    Location
          `http://www.aprobe.com/'

    Overview
          Instruments a program using Dynamic Action Linking in order
          to track down memory corruption and monitor memory usage,
          among other things.

   * APurify
    Author
          Samuel Devulder (<Samuel.Devulder@info.unicaen.fr>)

    License
          Free Software

    Platforms
          AmigaOS

    Location
          `http://wuarchive.wustl.edu/~aminet/dirs/dev_debug.html'

    Overview
          Instruments an assembler source file to insert code that
          checks all memory accesses.

   * BoundsChecker
    Author
          NuMega Corporation (<info@numega.com>)

    License
          Commercial Software

    Platforms
          Windows, MS-DOS

    Location
          `http://www.numega.com/'

    Overview
          Detects and diagnoses errors in static, stack and heap memory
          and in memory and resource leaks.

   * C++ Debugging Support Library (libcwd)
    Author
          Carlo Wood <carlo@alinoe.com>

    License
          Q Public License

    Platforms
          Various UNIX

    Location
          `http://sourceforge.net/projects/libcw/'

    Overview
          A C++ debugging library that can also detect memory
          corruption and memory leaks.

   * Ccmalloc
    Author
          Armin Biere (<biere@inf.ethz.ch>)

    License
          GNU General Public License

    Platforms
          Various UNIX

    Location
          `http://www.inf.ethz.ch/personal/biere/projects/ccmalloc/'

    Overview
          Can interface with `gdb' to find memory leaks, multiple
          deallocations and memory corruptions in C or C++ programs.

   * Chaperon
    Author
          John Reiser (<jreiser@BitWagon.com>)

    License
          Commercial Software

    Platforms
          Linux

    Location
          `http://www.bitwagon.com/chaperon.html'

    Overview
          Runs existing Intel Linux binary application programs, but
          checks for and reports bad behaviour in accessing memory.

   * Checker
    Author
          Tristan Gingold (<bug-checker@gnu.org>)

    License
          GNU General Public License

    Platforms
          Various UNIX

    Location
          `http://www.gnu.org/software/checker/checker.html'

    Overview
          Detects illegal memory accesses when reading from
          uninitialised memory, writing to freed memory or outside
          memory blocks.  Also contains a garbage collector for
          detecting memory leaks.

   * CMEM
    Author
          Brett Hunsaker (<hunsaker@eisner.decus.org>)

    License
          Free Software

    Platforms
          VMS

    Location
          `http://www.openvms.compaq.com/freeware/CMEM/'

    Overview
          Provides debugging versions of the C run-time library memory
          allocation routines, with support for stack tracebacks and
          page protection.

   * CMM (Customisable Memory Manager)
    Author
          Giuseppe Attardi (<attardi@di.unipi.it>), Tito Flagella
          (<tito@di.unipi.it>) and Pietro Iglio (<iglio@di.unipi.it>)

    License
          Free Software

    Platforms
          Various UNIX, Windows, MacOS, DOS

    Location
          `ftp://ftp.di.unipi.ti/pub/project/posso/cmm/'

    Overview
          A memory management facility supporting memory intensive
          applications in C++, with support for multiple heaps (each
          one optionally implementing a different storage discipline)
          and garbage collection.

   * CSRI malloc
    Author
          Mark Moraes (<moraes@deshaw.com>)

    License
          Free Software

    Platforms
          Various UNIX

    Location
          `ftp://ftp.cs.toronto.edu/pub/moraes/malloc.tar.gz'

    Overview
          A library of dynamic memory allocation functions with limited
          debugging and profiling support and detection of memory
          leaks.  Also comes with a graphical tool to display a dynamic
          picture of the heap.

   * DBAlloc
    Author
          Peter MacDonald (<peter@pdqi.com>)

    License
          Free Software

    Platforms
          Various UNIX, Windows

    Location
          `http://browsex.com/dballoc.html'

    Overview
          A memory leak and fence-post malloc debug library.

   * Dbmalloc
    Author
          Conor P. Cahill (<cpcahil@virtech.vti.com>)

    License
          Free Software

    Platforms
          Various UNIX

    Location
          `http://dickey.his.com/dbmalloc/dbmalloc.html'

    Overview
          Provides replacements for memory management library functions
          and provides a full set of debugging features which detect
          memory overruns and other types of misuse.

   * Dbmalloc
    Author
          Michael McTernan (<mm7323@bris.ac.uk>)

    License
          Free Software

    Platforms
          Various UNIX, Windows

    Location
          `http://www.cs.bris.ac.uk/~mm7323/DbMalloc/'

    Overview
          A drop-in replacement for the C memory allocation functions,
          providing facilities for quickly finding memory leaks.

   * Debauch
    Author
          Jon A. Christopher (<jac8792@tamu.edu>)

    License
          GNU General Public License

    Platforms
          Linux

    Location
          `http://mackerel.tamu.edu/jon/gnu/'

    Overview
          A memory allocation debugger for C which will detect memory
          leaks, corrupted memory, stores to freed memory and more.

   * Debug Heap
    Author
          IBM Corporation (<info@ibm.com>)

    License
          Commercial Software

    Platforms
          IBM AS/400

    Location
          `http://www.as400.ibm.com/developer/porting/heapexternal.html'

    Overview
          A heap debugging environment with stack traceback for IBM
          AS/400 servers.

   * DebugObject
    Author
          Beniamin Cherniavsky (<cben@israel.crosswinds.net>)

    License
          GNU General Public License

    Platforms
          Various UNIX, Windows

    Location
          `http://www.crosswinds.net/~cben/objc/'

    Overview
          A set of classes for debugging dynamic memory problems in
          Objective C.

   * Dmalloc
    Author
          Gray Watson (<gray@burger.letters.com>)

    License
          Free Software

    Platforms
          Various UNIX, Windows, MS-DOS

    Location
          `http://www.dmalloc.com/'

    Overview
          A drop-in replacement for the system's memory management
          routines, providing powerful debugging facilities
          configurable at run-time.  Formerly known as Malloc_Dbg.

   * DPCRTLMM
    Author
          David Duncan Ross Palmer (<overlord@daybologic.co.uk>)

    License
          GNU General Public License

    Platforms
          Various UNIX, Windows, MS-DOS

    Location
          `http://www.daybologic.co.uk/dev/dpcrtlmm/'

    Overview
          Detects failures to release memory and attempts to release
          memory which has not been allocated, and can also provide
          statistics and logging facilities.

   * Electric Fence
    Author
          Bruce Perens (<bruce@pixar.com>)

    License
          GNU General Public License

    Platforms
          Various UNIX

    Location
          `ftp://ftp.perens.com/pub/ElectricFence/'

    Overview
          Uses virtual memory hardware to protect dynamically allocated
          memory in order to detect illegal memory accesses.

   * Enforcer
    Author
          Michael Sinz (<Enforcer@sinz.org>)

    License
          Free Software

    Platforms
          AmigaOS

    Location
          `http://www.iam.com/amiga/enforcer.html'

    Overview
          Sets up MMU tables to watch for illegal accesses to memory,
          such as the low page and non-existent pages.

   * FDA (Free Debug Allocator)
    Author
          Thomas Helvey (<tomh@inxpress.net>)

    License
          GNU General Public License

    Platforms
          Linux, Windows

    Location
          `http://www.debian.org/Packages/unstable/devel/fda.html'

    Overview
          Provides routines that can be plugged in to replace
          `malloc()', `calloc()', `realloc()' and `free()'.

   * Fortify
    Author
          Simon Bullen (<sbullen@cybergraphic.com.au>)

    License
          Free Software

    Platforms
          AmigaOS

    Location
          `http://www.geocities.com/SiliconValley/Horizon/8596/fortify.html'

    Overview
          Provides a fortified shell for memory allocations, trapping
          memory leaks, writes beyond and before memory blocks and
          writes to freed memory.

   * Gabe's Debug Library
    Author
          Gabriel Sechan <gsechan@hotmail.com>

    License
          Free Software

    Platforms
          Windows

    Location
          `http://sourceforge.net/projects/debuglib/'

    Overview
          A debugging library for C++ which performs dynamic memory
          management and looks for potential problems and memory leaks.

   * GC (Garbage Collector)
    Author
          Hans-J. Boehm (<boehm@acm.org>)

    License
          Free Software

    Platforms
          Various UNIX, AmigaOS, Windows, MS-DOS, MacOS

    Location
          `http://www.hpl.hp.com/personal/Hans_Boehm/gc/'

    Overview
          A general-purpose, garbage-collecting storage allocator that
          is intended to be used as a plug-in replacement for
          `malloc()', but can also be used to detect memory leaks.

   * GCAlloc
    Author
          Joel Bartlett (<bartlett@decwrl.dec.com>)

    License
          Free Software

    Platforms
          Various UNIX

    Location
          `ftp://gatekeeper.dec.com/pub/DEC/CCgc/'

    Overview
          A highly-portable generational, mostly-copying garbage
          collector for C++.

   * GlowCode
    Author
          Electric Software, Inc. (<info@glowcode.com>)

    License
          Commercial Software

    Platforms
          Windows

    Location
          `http://www.glowcode.com/'

    Overview
          Provides a profiler, call coverage tool and resource browser
          which can detail memory leaks.

   * GMemLogger
    Author
          Yves Mettier (<ymettier@libertysurf.fr>)

    License
          GNU General Public License

    Platforms
          Linux

    Location
          `http://sourceforge.net/projects/gmemlogger/'

    Overview
          Logs allocated memory for the purpose of detecting memory
          leaks.

   * Great Circle
    Author
          Geodesic Systems (<info@geodesic.com>)

    License
          Commercial Software

    Platforms
          Various UNIX, Windows

    Location
          `http://www.geodesic.com/'

    Overview
          Provides complete heap profiling, allowing programmers to see
          what parts of a program are using the most memory with
          symbolic stack tracing.

   * HeapAgent
    Author
          MicroQuill (<info@microquill.com>)

    License
          Commercial Software

    Platforms
          Windows

    Location
          `http://www.microquill.com/'

    Overview
          Instruments the heap to provide heap error detection without
          the need to recompile any source code.

   * HeapCheck
    Author
          Thanassis Tsiodras (<ttsiod@softlab.ntua.gr>)

    License
          GNU General Public License

    Platforms
          Windows

    Location
          `http://www.image.ece.ntua.gr/~ttsiod/HeapCheck.html'

    Overview
          A debugging memory allocator that can detect invalid
          read/write accesses to heap memory, and also detects memory
          leaks.

   * HeapManager
    Author
          Andrew Wulf (<heapmanager@biit.com>)

    License
          Free Software

    Platforms
          MacOS

    Location
          `http://www.biit.com/'

    Overview
          Provides a general-purpose dynamic memory allocation
          debugging package with symbolic stack traceback.

   * IDH
    Author
          Ivan Skytte Jorgensen (<isj@image.dk>)

    License
          Free Software

    Platforms
          Various UNIX

    Location
          `http://www.platypus.adsl.dk/idh/index.html/'

    Overview
          Detects most overwrites, stale pointers, wild pointers,
          double-free and invalid mix of heap management functions.

   * Insure++
    Author
          ParaSoft (<info@parasoft.com>)

    License
          Commercial Software

    Platforms
          Various UNIX, Windows

    Location
          `http://www.parasoft.com/'

    Overview
          Uses Source Code Instrumentation and Runtime Pointer Tracking
          technologies to pinpoint memory corruption, memory leaks,
          operations on unrelated pointers and more.  The Inuse
          graphical memory usage display tool is also provided with this
          software.

   * JMalloc
    Author
          Jeff Dunlop

    License
          Free Software

    Platforms
          Windows, MS-DOS

    Location
          `http://www.snippets.org/'

    Overview
          Provides tracing and debugging for `malloc()' and `operator
          new'.

   * JProbe
    Author
          KL Group (<info@klgroup.com>)

    License
          Commercial Software

    Platforms
          Various UNIX, Windows

    Location
          `http://www.klgroup.com/'

    Overview
          Helps pinpoint memory leaks in Java applications by tracking
          which objects hold references to other objects, and allows
          visualisation of memory usage in real-time.

   * Leak
    Author
          Christopher Phillips (<pefv700@hermes.chpc.utexas.edu>)

    License
          Free Software

    Platforms
          Various UNIX

    Location
          `http://sources.isc.org/devel/memleak/leak.txt'

    Overview
          Logs all calls to `malloc()' and related functions to
          database files with the filename and line number, then
          attempts to validate reallocations and deallocations and
          detect memory leaks.

   * Leak
    Author
          Josh McCormick (<jmccorm@galstar.com>)

    License
          Free Software

    Platforms
          Various UNIX

    Location
          `http://www.galstar.com/~jmccorm/leak/'

    Overview
          A simple shell script that monitors the system looking for
          processes which leak memory.

   * LeakBug
    Author
          Christian Hammond (<chipx86@portaldesign.net>), Domenico
          Andreoli (<cavok@filibusta.crema.unimi.it>) and Gerry Jo
          Jellestad (<gerry@c64.org>)

    License
          GNU General Public License

    Platforms
          Various UNIX

    Location
          `http://www.gnupdate.org/'

    Overview
          A memory leak tracer that specializes in detecting leaks from
          a program's own calls to `malloc()', `strdup()', etc, but
          does not detect leaks from outside libraries.

   * Leakers
    Author
          Gabriel M. Deal (<gmd@yellowleaf.org>)

    License
          GNU General Public License

    Platforms
          Various UNIX

    Location
          `http://www.yellowleaf.org/gmd/software/leakers/'

    Overview
          Detects memory allocation errors by writing a log file and
          then examining it for memory leaks and attempts to free
          memory multiple times.

   * LeakTracer
    Author
          Erwin Andreasen (<erwin@andreasen.org>)

    License
          Free Software

    Platforms
          Various UNIX

    Location
          `http://www.andreasen.org/LeakTracer/'

    Overview
          Detects memory leaks in C++ programs by overriding `operator
          new' and `operator delete'.

   * Leaky
    Author
          Kipp Hickman (<kipp@netscape.com>)

    License
          Netscape Public License

    Platforms
          Linux

    Location
          `http://www.mozilla.org/unix/leaky.html'

    Overview
          A program which helps find memory leaks and helps debug
          reference count problems with xpcom objects.

   * LibKmalloc
    Author
          Akira Higuchi (<a@kondara.org>)

    License
          GNU General Public License

    Platforms
          Linux

    Location
          `http://www.kondara.org/~a/libkmalloc.html'

    Overview
          A tiny malloc debugger which detects multiple frees and
          buffer overruns and underruns.

   * LibSafe
    Author
          AT&T Bell Labs (<libsafe@research.bell-labs.com>)

    License
          GNU General Public License

    Platforms
          Linux

    Location
          `http://www.bell-labs.com/org/11356/libsafe.html'

    Overview
          Protects a process against the exploitation of buffer
          overflow vulnerabilities in process stacks.

   * Malloc Debug
    Author
          Brandon S. Allbery <allbery@ncoast.org>

    License
          Free Software

    Platforms
          Various UNIX

    Location
          `http://www.leo.org/pub/comp/usenet/comp.sources.misc/malloc-debug/'

    Overview
          A debugging malloc package with stack traceback capability.

   * Malloc Debug Library
    Author
          Rammi (<rammi@quincunx.escape.de>)

    License
          Free Software

    Platforms
          Various UNIX

    Location
          `http://www.escape.de/users/quincunx/rmdebug.html'

    Overview
          Implements wrappers for the normal heap handling functions.

   * MallocTrace
    Author
          Mark Brader (<msb@sq.sq.com>)

    License
          Free Software

    Platforms
          Various UNIX

    Location
          `ftp://ftp.uu.net/usenet/comp.sources.unix/volume18/malloc-trace.Z'

    Overview
          A malloc package with call stack tracebacks.

   * MalTrace
    Author
          Michael Schwartz (<schwartz@cs.washington.edu>)

    License
          Free Software

    Platforms
          Various UNIX

    Location
          `http://www.mit.edu/afs/sipb/user/tytso/News/maltrace'

    Overview
          Traces all calls to `malloc()' and `free()' in order to
          detect memory leaks.

   * Mark_Malloc
    Author
          Sed (<sed@free.fr>)

    License
          Free Software

    Platforms
          Various UNIX

    Location
          `http://sed.free.fr/mark_malloc'

    Overview
          Marks memory allocations in order to detect memory leaks.

   * MCheck
    Author
          Ronald Veldema (<rveldema@cs.vu.nl>)

    License
          GNU General Public License

    Platforms
          Linux

    Location
          `http://www.cs.vu.nl/~rveldema/mcheck/mcheck.html'

    Overview
          A memory usage and malloc checker for C and C++.  Comes with
          a Java application for browsing the trace files produced.

   * MEM
    Author
          Walter Bright

    License
          Free Software

    Platforms
          MS-DOS

    Location
          `http://www.snippets.org/'

    Overview
          A set of functions for debugging pointer and memory
          allocation problems.

   * MemCheck
    Author
          Stratosware Corporation (<info@stratosware.com>)

    License
          Commercial Software

    Platforms
          Windows

    Location
          `http://www.stratosware.com/'

    Overview
          Detects various run-time errors related to operating system
          resources and provides information on memory leaks.

   * MemCheck
    Author
          IBM Corporation (<info@ibm.com>)

    License
          Commercial Software

    Platforms
          IBM OS/390

    Location
          `http://www.s390.ibm.com/oe/tools/memcheck_2_1.html'

    Overview
          Aids the discovery of memory leaks in single- and
          multi-threaded C/C++ programs.

   * MemDebug
    Author
          Rene Schmit (<rene.schmit@bss.lu>)

    License
          Free Software

    Platforms
          Various UNIX, Windows, MS-DOS, MacOS

    Location
          `http://www.bss.lu/Memdebug/Memdebug.html'

    Overview
          Provides memory management error detection, memory usage
          error detection, memory usage profiling and error simulation.

   * MemLeak
    Author
          Keith Packard (<keithp@ncd.com>)

    License
          Free Software

    Platforms
          Various UNIX

    Location
          `ftp://ftp.x.org/pub/R6.4/xc/util/memleak/'

    Overview
          Replaces the C library allocation functions and provides
          extensive memory checking, locating lost memory, detecting
          free memory still in use and stores to free memory along with
          stack tracebacks.

   * Memory Advisor
    Author
          PLATINUM Technology (<info@platinum.com>)

    License
          Commercial Software

    Platforms
          Various UNIX

    Location
          `http://www.platinum.com/'

    Overview
          Disassembles an object module into system-independent
          assembler code, inserts error checking instructions, then
          re-assembles the code.  Can also replace existing malloc
          libraries in order to provide greater error checking.
          Formerly known as Sentinel.

   * Memory Sleuth
    Author
          TurboPower (<info@turbopower.com>)

    License
          Commercial Software

    Platforms
          Windows

    Location
          `http://www.turbopower.com/'

    Overview
          Quickly tracks down memory leaks and resource allocation
          errors with C++Builder and Delphi.

   * Memory Validator
    Author
          Software Verification (<sales@softwareverify.com>)

    License
          Commercial Software

    Platforms
          Windows

    Location
          `http://www.softwareverify.com/'

    Overview
          Detects memory and resource leaks.

   * Memprof
    Author
          Owen Taylor (<otaylor@redhat.com>)

    License
          GNU General Public License

    Platforms
          Linux

    Location
          `http://people.redhat.com/otaylor/memprof/'

    Overview
          A tool for profiling memory usage and detecting memory leaks.

   * Memproof
    Author
          AutomatedQA (<info@totalqa.com>)

    License
          Free Software

    Platforms
          Windows

    Location
          `http://www.totalqa.com/'

    Overview
          A memory and resource leak debugger for Borland's family of
          Windows compilers.

   * MemTest
    Author
          Jim Buchanan (<jbuchana@iquest.net>)

    License
          Free Software

    Platforms
          Various UNIX

    Location
          `ftp://ftp.loxinfo.co.th/pub/unix/utils/mem_test-0_10_tar.gz'

    Overview
          Helps locate memory leaks in a program under development by
          creating a log file that records most memory allocations and
          deallocations.

   * MemTrace
    Author
          Nico Hoogervorst (<nico@knoware.nl>)

    License
          Free Software

    Platforms
          Windows

    Location
          `http://utopia.knoware.nl/users/nico/tools/c/memtrace/'

    Overview
          A simple enhancement for C source code which makes it easier
          to find memory leaks.

   * MemTrace
    Author
          Frank Pilhofer (<fp@informatik.uni-frankfurt.de>)

    License
          Free Software

    Platforms
          Various UNIX

    Location
          `http://www.informatik.uni-frankfurt.de/~fp/Tools/MemTrace/'

    Overview
          Searches for memory leaks in a program and uses various
          platform-specific features to record a stack trace each time
          a memory chunk is allocated.

   * MemWatch
    Author
          Johan Lindh (<johan@link-data.com>)

    License
          Free Software

    Platforms
          Various UNIX, Windows

    Location
          `http://www.link-data.com/'

    Overview
          A fault-tolerant memory leak and corruption detection tool.

   * MemWatch
    Author
          Doug Walker (<walker@unx.sas.com>)

    License
          Free Software

    Platforms
          AmigaOS

    Location
          `http://wuarchive.wustl.edu/~aminet/dirs/dev_debug.html'

    Overview
          Provides replacement memory allocation routines for adding
          lots of memory debugging features that you link into your
          program.

   * MemWatch
    Author
          Sundial Services (<info@sundialservices.com>)

    License
          Free Software

    Platforms
          Windows

    Location
          `http://www.sundialservices.com/download/memwatch.pas'

    Overview
          Provides replacement dynamic memory allocation functions for
          Delphi which look for memory underwrites and overwrites.

   * MM (Shared Memory Library)
    Author
          Ralf S. Engelschall (<rse@engelschall.com>)

    License
          Free Software

    Platforms
          Various UNIX, Windows

    Location
          `http://www.engelschall.com/sw/mm/'

    Overview
          Simplifies the usage (and can help debug) the use of shared
          memory between related processes.

   * MM
    Author
          Dave Clements (<clements@cs.uoregon.edu>)

    License
          Free Software

    Platforms
          Various UNIX

    Location
          `http://www.cirl.uoregon.edu/clements/memoryManager.html'

    Overview
          Overrides the C dynamic memory allocation functions to
          provide better debugging capabilities.

   * Mmalloc
    Author
          Mike Haertel (<mike@ai.mit.edu>) and Fred Fish
          (<fnf@cygnus.com>)

    License
          GNU General Public License

    Platforms
          Various UNIX

    Location
          `http://www.gnu.org/'

    Overview
          Uses `mmap()' to allocate separate pools of memory which can
          be mapped onto files for later reuse.

   * MPR
    Author
          Taj Khattra (<taj.khattra@pobox.com>)

    License
          Free Software

    Platforms
          Linux

    Location
          `http://metalab.unc.edu/pub/Linux/devel/lang/c/mpr-2.0.tar.gz'

    Overview
          Attempts to find memory leaks in C/C++ programs by writing a
          log file during program execution, which can then be
          processed for obtaining further information.

   * Mprof
    Author
          Ben Zorn (<zorn@microsoft.com>)

    License
          Free Software

    Platforms
          Various UNIX

    Location
          `ftp://gatekeeper.dec.com/pub/misc/mprof-3.0.tar.Z'

    Overview
          Profiles the dynamic memory allocation behaviour of programs
          by logging details for each function than makes a memory
          allocation, including call stack tracebacks.

   * MSS (Memory Supervision System)
    Author
          Juan Jesus Alcolea Picazo (<a920101@zipi.fi.upm.es>) and
          Peter Palotas (<blizzar@hem1.passagen.se>)

    License
          GNU General Public License

    Platforms
          Linux, Windows, MS-DOS

    Location
          `http://hem.passagen.se/blizzar/mss/'

    Overview
          Full-featured malloc library for C and C++ providing
          detection of memory leaks, use of uninitialised memory and
          out of range block accesses as well as lots of tracing
          facilities.

   * MTrace
    Author
          Morris R. Dovey (<mrdovey@iedu.com>)

    License
          Free Software

    Platforms
          Various UNIX, Windows

    Location
          `http://www.iedu.com/mrd/c/mtrace.c'

    Overview
          A very simple malloc tracing package.

   * MuForce
    Author
          Thomas Richter (<thor@einstein.math.tu-berlin.de>)

    License
          Free Software

    Platforms
          AmigaOS

    Location
          `http://www.math.tu-berlin.de/~thor/thor/index.html'

    Overview
          Uses the MMU to monitor the system for any writes to
          non-existent memory and reports them over the serial port or
          any other output stream.

   * MuGuardianAngel
    Author
          Thomas Richter (<thor@einstein.math.tu-berlin.de>)

    License
          Free Software

    Platforms
          AmigaOS

    Location
          `http://www.math.tu-berlin.de/~thor/thor/index.html'

    Overview
          An extension to the MuForce program which protects free
          memory and detects all illegal memory accesses.

   * MuLib
    Author
          Thomas Richter (<thor@einstein.math.tu-berlin.de>)

    License
          Free Software

    Platforms
          AmigaOS

    Location
          `http://www.math.tu-berlin.de/~thor/thor/index.html'

    Overview
          Provides access to the MMU in modern Amigas so that features
          such as virtual memory can be implemented.

   * MULTI
    Author
          Green Hills Software, Inc. (<sales@ghs.com>)

    License
          Commercial Software

    Platforms
          Various UNIX, Windows

    Location
          `http://www.ghs.com'

    Overview
          Inserts special checks into a program to watch for and report
          a broad variety of run-time errors, including freeing
          unallocated memory and memory leaks.

   * Mungwall
    Author
          Commodore-Amiga, Inc. (<info@amiga.de>)

    License
          Free Software

    Platforms
          AmigaOS

    Location
          `http://wuarchive.wustl.edu/~aminet/dirs/dev_debug.html'

    Overview
          Patches the system to check for free memory corruption.

   * NJAMD (Not Just Another Malloc Debugger)
    Author
          Mike Perry (<mikepery@fscked.org>)

    License
          GNU General Public License

    Platforms
          Various UNIX

    Location
          `http://fscked.org/proj/njamd.shtml/'

    Overview
          Helps track down a wide range of memory allocation problems
          and is divided into a front end executable and a library back
          end.

   * ObjectCenter
    Author
          CenterLine Development Systems (<info@centerline.com>)

    License
          Commercial Software

    Platforms
          Various UNIX

    Location
          `http://www.centerline.com/'

    Overview
          Provides a C and C++ programming environment that can detect
          memory leaks, duplicate frees and illegal access errors
          including loads from uninitialised objects.

   * Optimizeit
    Author
          Intuitive Systems, Inc. (<info@optimizeit.com>)

    License
          Commercial Software

    Platforms
          Various UNIX, Windows

    Location
          `http://www.optimizeit.com/'

    Overview
          Attempts to locate memory leaks and performance bottlenecks
          in Java programs.

   * Plumber
    Author
          Owen O'Malley (<omalley@ics.uci.edu>)

    License
          GNU General Public License

    Platforms
          Linux, Solaris, SunOS

    Location
          `http://www.ics.uci.edu/~softtest/plumber.html'

    Overview
          A tool that replaces the normal Ada and C/C++ dynamic memory
          allocation functions and detects unfreed memory blocks.

   * Purify
    Author
          Rational Software (<info@rational.com>)

    License
          Commercial Software

    Platforms
          Various UNIX, Windows

    Location
          `http://www.rational.com/'

    Overview
          Uses Object Code Insertion technology to provide run-time
          error checking and memory leak detection.

   * QC
    Author
          Onyx Technology (<sales@onyx-tech.com>)

    License
          Commercial Software

    Platforms
          MacOS

    Location
          `http://www.onyx-tech.com/'

    Overview
          Runs in the background as a control panel and detects various
          memory errors which can then be caught and run under a
          debugger.

   * SBase
    Author
          Ben Lilburne (<blilburn@cit.nepean.uws.edu.au>)

    License
          Free Software

    Platforms
          Various UNIX, Windows

    Location
          `http://www.cit.uws.edu.au/~blilburn/sbase/'

    Overview
          A set of classes for debugging dynamic memory problems in
          Objective C.

   * SCID
    Author
          Richard Mills (<rich@xerp.freeserve.co.uk>)

    License
          GNU General Public License

    Platforms
          Various UNIX

    Location
          `http:///www.xerp.demon.co.uk/'

    Overview
          A program that tries to help locate bugs caused by the
          reading and writing of invalid pointers in C code by source
          code insertion.

   * SmartAlloc
    Author
          John Walker

    License
          Free Software

    Platforms
          Various UNIX, MS-DOS

    Location
          `http://www.fourmilab.ch/smartall/'

    Overview
          Detects orphaned buffers of dynamic memory allocations and
          also helps to find other common problems in management of
          dynamic storage.

   * SmartHeap
    Author
          MicroQuill (<info@microquill.com>)

    License
          Commercial Software

    Platforms
          Various UNIX, Windows, OS/2, MS-DOS, MacOS

    Location
          `http://www.microquill.com/'

    Overview
          Provides optimised heap performance along with detecting
          memory leaks, memory overwrites, double-freeing, wild
          pointers, invalid parameters, etc.

   * Spotlight
    Author
          Onyx Technology (<sales@onyx-tech.com>)

    License
          Commercial Software

    Platforms
          MacOS

    Location
          `http://www.onyx-tech.com/'

    Overview
          Performs memory protection on PowerPC executables and helps
          detect memory leaks.

   * StackTrace
    Author
          Bjorn Reese (<breese@mail1.stofanet.dk>)

    License
          Free Software

    Platforms
          Various UNIX

    Location
          `http://home1.stofanet.dk/breese/debug/debug.tar.gz'

    Overview
          Provides code to generate a stack trace of the program at any
          point during execution using either a debugger or built-in
          methods found in the GNU C compiler or on some systems.

   * TestCenter
    Author
          CenterLine Development Systems (<info@centerline.com>)

    License
          Commercial Software

    Platforms
          Various UNIX

    Location
          `http://www.centerline.com/'

    Overview
          Detects memory leaks, duplicate frees and illegal access
          errors including loads from uninitialised objects.

   * Third Degree
    Author
          Digital Equipment Corporation (<info@digital.com>)

    License
          Commercial Software

    Platforms
          Digital UNIX

    Location
          `http://www.digital.com/'

    Overview
          A tool that performs memory access checks and memory leak
          detection of C, C++ and Fortran programs at run-time.
          Applications are modified using ATOM to determine if any
          memory locations are accessed when not properly allocated or
          initialised.

   * Valgrind
    Author
          Julian Seward (<jseward@acm.org>)

    License
          GNU General Public License

    Platforms
          Linux

    Location
          `http://valgrind.org/'

    Overview
          A suite of tools for debugging and profiling on Linux.
          Implements a virtual machine for various different processor
          architectures in order to perform instrumentation on the
          application being debugged.

   * Vmalloc
    Author
          Kiem-Phong Vo (<kpv@research.att.com>)

    License
          AT&T Source Code License

    Platforms
          Various UNIX, Windows

    Location
          `http://akpublic.research.att.com/sw/tools/vmalloc/'

    Overview
          A discipline and method library for dynamic memory
          allocation, with support for regions, debugging and profiling.

   * Wipeout
    Author
          Olaf Barthel (<olsen@sourcery.han.de>)

    License
          Free Software

    Platforms
          AmigaOS

    Location
          `http://wuarchive.wustl.edu/~aminet/dirs/dev_debug.html'

    Overview
          Runs in the background checking free memory for corruption.

   * YaMa
    Author
          Venkatesha Murthy G. (<gvmt@vsnl.com>)

    License
          Free Software

    Platforms
          Linux

    Location
          `http://www.geocities.com/ipsgvm/libyama/'

    Overview
          A memory allocator with leak tracing and some anti-heap
          corruption facilities.

   * YAMD (Yet Another Malloc Debugger)
    Author
          Nate Eldredge (<neldredge@hmc.edu>)

    License
          GNU General Public License

    Platforms
          Linux, MS-DOS

    Location
          `http://www3.hmc.edu/~neldredge/yamd/'

    Overview
          A tool for finding bugs related to dynamic memory allocation
          in C and C++, and includes paging mechanisms to catch bugs
          immediately.

   * ZeroFault
    Author
          The Kernel Group (<info@zerofault.com>)

    License
          Commercial Software

    Platforms
          AIX UNIX

    Location
          `http://www.zerofault.com/'

    Overview
          Uses run-time emulator technology to provide run-time error
          checking and memory leak detection.

   However, before you try out any of the above software, there may
already be a malloc library with debugging support on your system that
might be suitable for solving your problem.  For example, on Solaris
the following libraries are available:

`malloc(3c)'
     Trade-off between performance and efficiency.  

`malloc(3x)'
     Slower performance, space-efficient.  

`bsdmalloc(3x)'
     Better performance, space-inefficient.  

`mtmalloc(3t)'
     Thread-safe memory allocator.  

`mapmalloc(3x)'
     Uses `mmap()' instead of `sbrk()' to allocate heap space.  

`watchmalloc(3x)'
     Uses watch point areas to check for overflows.

   On platforms with the GNU C library, such as Linux, there are several
environment variables that can be used to enable various debugging
features of `malloc()', etc.  There are also extra functions provided
in the library which can be used to aid in debugging, and some shell
scripts which can translate return addresses or locate unfreed memory
allocations in the log files produced.  Useful information on the
debugging features available within the GNU C library is located at
`http://sdb.suse.de/sdb/en/html/aj_debug.html'.

   If you suspect that the debugging problem you are looking at is
likely to be related to UNIX system calls then some systems come with
the `strace' or `truss' commands which allow you to trace all of the
system calls that a program makes when running.  This can sometimes be
invaluable in pinpointing the exact point at which a program fails, but
as it only operates at the system call level, no information about
individual memory allocations is available.

   On Windows 2000 (and probably later releases of the operating system
as well) there is a utility called `pageheap' which acts in a similar
way to the `mpatrol' command in that it overrides the definitions of
`malloc()' and related functions for any programs that it runs.  It has
a similar behaviour to the `--page-alloc-upper' option but has far less
features.  However, it could be very useful if you can't get mpatrol to
work for you.

   ---------- Footnotes ----------

   (1) This list can be considered to be a slightly more up to date
version of `Debugging Tools for Dynamic Storage Allocation and Memory
Management' (`http://www.cs.colorado.edu/~zorn/MallocDebug.html') by
Ben Zorn.


File: mpatrol.info,  Node: References,  Next: About the author,  Prev: Related software,  Up: Top

Appendix L References
*********************

This section contains references to interesting papers and resources on
related topics and the field of memory management in general.  The vast
majority of theoretical information can be found at the Memory
Management Reference, although this does tend to concentrate on garbage
collection.  The other references take a more practical approach to
memory management and in some cases provide implementation details.
Let me know if you'd like to see any other references or resources
added to this list.

   * Avoiding Motif Memory Leaks
    Author
          Kenton Lee (<kenton@rahul.net>)

    Location
          `http://www.rahul.net/kenton/txa/mar96.html'

    Overview
          An article on avoiding memory leaks in Motif applications.

   * C++ FAQ Lite: Freestore Management
    Author
          Marshall Cline (<cline@parashift.com>)

    Location
          `http://www.parashift.com/c++-faq-lite/freestore-mgmt.html'

    Overview
          Everything you ever wanted to know about C++ memory
          management.

   * Debugging Memory On Linux
    Author
          Petr Sorfa (<editor@ssc.com>)

    Location
          `http://www.linuxjournal.com/article.php?sid=4681'

    Overview
          An article detailing the tools available to debug memory
          problems on Linux.

   * Effective C++ Memory Allocation
    Author
          Aaron Dailey (<adailey@chaparraltec.com>)

    Location
          `http://www.embedded.com/1999/9901/9901feat2.htm'

    Overview
          Documents techniques for better use of the C++ dynamic memory
          allocation operators.

   * How To Debug Memory Leaks
    Author
          The Mozilla Organization (<webmaster@mozilla.org>)

    Location
          `http://www.lxr.mozilla.org/mozilla/source/xpcom/doc/MemoryTools.html'

    Overview
          A list of memory analysis tools that the Mozilla team have
          developed in order to quickly spot and fix memory leaks.

   * Just Say No To Memory Leaks
    Author
          Steve Litt (<slitt@troubleshooters.com>)

    Location
          `http://www.troubleshooters.com/codecorn/memleak.htm'

    Overview
          An article discussing memory leaks and how to avoid them.

   * A Memory Allocator
    Author
          Doug Lea (<dl@gee.cs.oswego.edu>)

    Location
          `http://gee.cs.oswego.edu/dl/html/malloc.html'

    Overview
          Information on general memory allocation principles.

   * The Memory Management Reference
    Author
          XANALYS Software Tools (<mm-web@xanalys.com>)

    Location
          `http://www.xanalys.com/software_tools/mm/'

    Overview
          Links to many documents and research papers in the field of
          memory management, and has a large glossary which lists and
          explains related terms.

   * My Rant on C++'s `operator new'
    Author
          David Mazieres (<dm@cs.nyu.edu>)

    Location
          `http://www.pdos.lcs.mit.edu/~dm/c++-new.html'

    Overview
          Provides a scathing critique on the C++ dynamic memory
          allocation operators.

   * The Virtual Memory Tutorial
    Author
          The Hyperlearning Center (<webmaster@cne.gmu.edu>)

    Location
          `http://www.cne.gmu.edu/modules/vm/'

    Overview
          Provides a comprehensive tutorial on virtual memory, as well
          as detailing its history, theory and implementation.

   * X Window System Memory Leaks and Other Memory Bugs
    Author
          Kenton Lee (<kenton@rahul.net>)

    Location
          `http://www.rahul.net/kenton/txa/feb96.html'

    Overview
          An article on debugging memory problems in X applications.


File: mpatrol.info,  Node: About the author,  Next: Copying,  Prev: References,  Up: Top

Appendix M About the author
***************************

I live just outside Edinburgh (the capital city of Scotland) and work
at the University of Edinburgh in the Centre for Communication
Interface Research (CCIR).  I am currently also working towards gaining
a PhD in Usability Engineering.

   I used to work for an American company called Analog Devices which
designs and manufactures digital and analogue electronic equipment, as
well as Digital Signal Processors (DSPs).  Before that I worked for
Edinburgh Portable Compilers, a small Edinburgh-based company which
designed, wrote and sold compilers for various programming languages
and operating systems (mainly UNIX variants).  In 2000 it became a
wholly-owned subsidiary of Analog Devices and the focus was shifted to
write C and C++ compilers for the various ADI DSPs.

   I started working at EPC immediately after obtaining my honours
degree in Computer Science at Edinburgh University.  My interests lie
in operating systems and programming tools so this was an ideal working
environment for me to apply my knowledge and learn more about the bits
and pieces that most programmers and computer users know little or
nothing about.

   Writing compilers is a complex business that most people take for
granted.  The popular view is that once you have a lexer and a parser
for a particular programming language then you are 90% of the way to
having a compiler.  However, modern compilers are required to perform
more and more aggressive optimisations on user code, all of which
require complex algorithms, and most of which are applied at the
code-generator level.  Add accurate debugging information generation,
C++ exceptions and templates, inline assembler support and an efficient
run-time library and you begin to see why writing and maintaining a
compiler is not a solo effort!

   I originally wrote the mpatrol library in my spare time with the
intention of selling it to EPC as a comprehensive memory debugging
solution for integration with their UNIX compilers.  Unfortunately, EPC
was taken over by ADI before it was finished and ADI had no use for
such a library in their DSP toolchain.  However, I still feel that it
was worth the effort (not least because of all the knowledge of other
operating systems that I gained whilst writing it), and I hope you do
too!


File: mpatrol.info,  Node: Copying,  Next: Function index,  Prev: About the author,  Up: Top

Appendix N Copying
******************

                          GNU GENERAL PUBLIC LICENSE
                            Version 3, 29 June 2007

      Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
      Everyone is permitted to copy and distribute verbatim copies
      of this license document, but changing it is not allowed.

                                 Preamble

       The GNU General Public License is a free, copyleft license for
     software and other kinds of works.

       The licenses for most software and other practical works are designed
     to take away your freedom to share and change the works.  By contrast,
     the GNU General Public License is intended to guarantee your freedom to
     share and change all versions of a program--to make sure it remains free
     software for all its users.  We, the Free Software Foundation, use the
     GNU General Public License for most of our software; it applies also to
     any other work released this way by its authors.  You can apply it to
     your programs, too.

       When we speak of free software, we are referring to freedom, not
     price.  Our General Public Licenses are designed to make sure that you
     have the freedom to distribute copies of free software (and charge for
     them if you wish), that you receive source code or can get it if you
     want it, that you can change the software or use pieces of it in new
     free programs, and that you know you can do these things.

       To protect your rights, we need to prevent others from denying you
     these rights or asking you to surrender the rights.  Therefore, you have
     certain responsibilities if you distribute copies of the software, or if
     you modify it: responsibilities to respect the freedom of others.

       For example, if you distribute copies of such a program, whether
     gratis or for a fee, you must pass on to the recipients the same
     freedoms that you received.  You must make sure that they, too, receive
     or can get the source code.  And you must show them these terms so they
     know their rights.

       Developers that use the GNU GPL protect your rights with two steps:
     (1) assert copyright on the software, and (2) offer you this License
     giving you legal permission to copy, distribute and/or modify it.

       For the developers' and authors' protection, the GPL clearly explains
     that there is no warranty for this free software.  For both users' and
     authors' sake, the GPL requires that modified versions be marked as
     changed, so that their problems will not be attributed erroneously to
     authors of previous versions.

       Some devices are designed to deny users access to install or run
     modified versions of the software inside them, although the manufacturer
     can do so.  This is fundamentally incompatible with the aim of
     protecting users' freedom to change the software.  The systematic
     pattern of such abuse occurs in the area of products for individuals to
     use, which is precisely where it is most unacceptable.  Therefore, we
     have designed this version of the GPL to prohibit the practice for those
     products.  If such problems arise substantially in other domains, we
     stand ready to extend this provision to those domains in future versions
     of the GPL, as needed to protect the freedom of users.

       Finally, every program is threatened constantly by software patents.
     States should not allow patents to restrict development and use of
     software on general-purpose computers, but in those that do, we wish to
     avoid the special danger that patents applied to a free program could
     make it effectively proprietary.  To prevent this, the GPL assures that
     patents cannot be used to render the program non-free.

       The precise terms and conditions for copying, distribution and
     modification follow.

                            TERMS AND CONDITIONS

       0. Definitions.

       "This License" refers to version 3 of the GNU General Public License.

       "Copyright" also means copyright-like laws that apply to other kinds of
     works, such as semiconductor masks.

       "The Program" refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as "you".  "Licensees" and
     "recipients" may be individuals or organizations.

       To "modify" a work means to copy from or adapt all or part of the work
     in a fashion requiring copyright permission, other than the making of an
     exact copy.  The resulting work is called a "modified version" of the
     earlier work or a work "based on" the earlier work.

       A "covered work" means either the unmodified Program or a work based
     on the Program.

       To "propagate" a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it on a
     computer or modifying a private copy.  Propagation includes copying,
     distribution (with or without modification), making available to the
     public, and in some countries other activities as well.

       To "convey" a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user through
     a computer network, with no transfer of a copy, is not conveying.

       An interactive user interface displays "Appropriate Legal Notices"
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to the
     extent that warranties are provided), that licensees may convey the
     work under this License, and how to view a copy of this License.  If
     the interface presents a list of user commands or options, such as a
     menu, a prominent item in the list meets this criterion.

       1. Source Code.

       The "source code" for a work means the preferred form of the work
     for making modifications to it.  "Object code" means any non-source
     form of a work.

       A "Standard Interface" means an interface that either is an official
     standard defined by a recognized standards body, or, in the case of
     interfaces specified for a particular programming language, one that
     is widely used among developers working in that language.

       The "System Libraries" of an executable work include anything, other
     than the work as a whole, that (a) is included in the normal form of
     packaging a Major Component, but which is not part of that Major
     Component, and (b) serves only to enable use of the work with that
     Major Component, or to implement a Standard Interface for which an
     implementation is available to the public in source code form.  A
     "Major Component", in this context, means a major essential component
     (kernel, window system, and so on) of the specific operating system
     (if any) on which the executable work runs, or a compiler used to
     produce the work, or an object code interpreter used to run it.

       The "Corresponding Source" for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including scripts to
     control those activities.  However, it does not include the work's
     System Libraries, or general-purpose tools or generally available free
     programs which are used unmodified in performing those activities but
     which are not part of the work.  For example, Corresponding Source
     includes interface definition files associated with source files for
     the work, and the source code for shared libraries and dynamically
     linked subprograms that the work is specifically designed to require,
     such as by intimate data communication or control flow between those
     subprograms and other parts of the work.

       The Corresponding Source need not include anything that users
     can regenerate automatically from other parts of the Corresponding
     Source.

       The Corresponding Source for a work in source code form is that
     same work.

       2. Basic Permissions.

       All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running a
     covered work is covered by this License only if the output, given its
     content, constitutes a covered work.  This License acknowledges your
     rights of fair use or other equivalent, as provided by copyright law.

       You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise remains
     in force.  You may convey covered works to others for the sole purpose
     of having them make modifications exclusively for you, or provide you
     with facilities for running those works, provided that you comply with
     the terms of this License in conveying all material for which you do
     not control copyright.  Those thus making or running the covered works
     for you must do so exclusively on your behalf, under your direction
     and control, on terms that prohibit them from making any copies of
     your copyrighted material outside their relationship with you.

       Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section 10
     makes it unnecessary.

       3. Protecting Users' Legal Rights From Anti-Circumvention Law.

       No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under article
     11 of the WIPO copyright treaty adopted on 20 December 1996, or
     similar laws prohibiting or restricting circumvention of such
     measures.

       When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such circumvention
     is effected by exercising rights under this License with respect to
     the covered work, and you disclaim any intention to limit operation or
     modification of the work as a means of enforcing, against the work's
     users, your or third parties' legal rights to forbid circumvention of
     technological measures.

       4. Conveying Verbatim Copies.

       You may convey verbatim copies of the Program's source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the code;
     keep intact all notices of the absence of any warranty; and give all
     recipients a copy of this License along with the Program.

       You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

       5. Conveying Modified Source Versions.

       You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these conditions:

         a) The work must carry prominent notices stating that you modified
         it, and giving a relevant date.

         b) The work must carry prominent notices stating that it is
         released under this License and any conditions added under section
         7.  This requirement modifies the requirement in section 4 to
         "keep intact all notices".

         c) You must license the entire work, as a whole, under this
         License to anyone who comes into possession of a copy.  This
         License will therefore apply, along with any applicable section 7
         additional terms, to the whole of the work, and all its parts,
         regardless of how they are packaged.  This License gives no
         permission to license the work in any other way, but it does not
         invalidate such permission if you have separately received it.

         d) If the work has interactive user interfaces, each must display
         Appropriate Legal Notices; however, if the Program has interactive
         interfaces that do not display Appropriate Legal Notices, your
         work need not make them do so.

       A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered work,
     and which are not combined with it such as to form a larger program,
     in or on a volume of a storage or distribution medium, is called an
     "aggregate" if the compilation and its resulting copyright are not
     used to limit the access or legal rights of the compilation's users
     beyond what the individual works permit.  Inclusion of a covered work
     in an aggregate does not cause this License to apply to the other
     parts of the aggregate.

       6. Conveying Non-Source Forms.

       You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this License,
     in one of these ways:

         a) Convey the object code in, or embodied in, a physical product
         (including a physical distribution medium), accompanied by the
         Corresponding Source fixed on a durable physical medium
         customarily used for software interchange.

         b) Convey the object code in, or embodied in, a physical product
         (including a physical distribution medium), accompanied by a
         written offer, valid for at least three years and valid for as
         long as you offer spare parts or customer support for that product
         model, to give anyone who possesses the object code either (1) a
         copy of the Corresponding Source for all the software in the
         product that is covered by this License, on a durable physical
         medium customarily used for software interchange, for a price no
         more than your reasonable cost of physically performing this
         conveying of source, or (2) access to copy the
         Corresponding Source from a network server at no charge.

         c) Convey individual copies of the object code with a copy of the
         written offer to provide the Corresponding Source.  This
         alternative is allowed only occasionally and noncommercially, and
         only if you received the object code with such an offer, in accord
         with subsection 6b.

         d) Convey the object code by offering access from a designated
         place (gratis or for a charge), and offer equivalent access to the
         Corresponding Source in the same way through the same place at no
         further charge.  You need not require recipients to copy the
         Corresponding Source along with the object code.  If the place to
         copy the object code is a network server, the Corresponding Source
         may be on a different server (operated by you or a third party)
         that supports equivalent copying facilities, provided you maintain
         clear directions next to the object code saying where to find the
         Corresponding Source.  Regardless of what server hosts the
         Corresponding Source, you remain obligated to ensure that it is
         available for as long as needed to satisfy these requirements.

         e) Convey the object code using peer-to-peer transmission, provided
         you inform other peers where the object code and Corresponding
         Source of the work are being offered to the general public at no
         charge under subsection 6d.

       A separable portion of the object code, whose source code is excluded
     from the Corresponding Source as a System Library, need not be
     included in conveying the object code work.

       A "User Product" is either (1) a "consumer product", which means any
     tangible personal property which is normally used for personal, family,
     or household purposes, or (2) anything designed or sold for incorporation
     into a dwelling.  In determining whether a product is a consumer product,
     doubtful cases shall be resolved in favor of coverage.  For a particular
     product received by a particular user, "normally used" refers to a
     typical or common use of that class of product, regardless of the status
     of the particular user or of the way in which the particular user
     actually uses, or expects or is expected to use, the product.  A product
     is a consumer product regardless of whether the product has substantial
     commercial, industrial or non-consumer uses, unless such uses represent
     the only significant mode of use of the product.

       "Installation Information" for a User Product means any methods,
     procedures, authorization keys, or other information required to install
     and execute modified versions of a covered work in that User Product from
     a modified version of its Corresponding Source.  The information must
     suffice to ensure that the continued functioning of the modified object
     code is in no case prevented or interfered with solely because
     modification has been made.

       If you convey an object code work under this section in, or with, or
     specifically for use in, a User Product, and the conveying occurs as
     part of a transaction in which the right of possession and use of the
     User Product is transferred to the recipient in perpetuity or for a
     fixed term (regardless of how the transaction is characterized), the
     Corresponding Source conveyed under this section must be accompanied
     by the Installation Information.  But this requirement does not apply
     if neither you nor any third party retains the ability to install
     modified object code on the User Product (for example, the work has
     been installed in ROM).

       The requirement to provide Installation Information does not include a
     requirement to continue to provide support service, warranty, or updates
     for a work that has been modified or installed by the recipient, or for
     the User Product in which it has been modified or installed.  Access to a
     network may be denied when the modification itself materially and
     adversely affects the operation of the network or violates the rules and
     protocols for communication across the network.

       Corresponding Source conveyed, and Installation Information provided,
     in accord with this section must be in a format that is publicly
     documented (and with an implementation available to the public in
     source code form), and must require no special password or key for
     unpacking, reading or copying.

       7. Additional Terms.

       "Additional permissions" are terms that supplement the terms of this
     License by making exceptions from one or more of its conditions.
     Additional permissions that are applicable to the entire Program shall
     be treated as though they were included in this License, to the extent
     that they are valid under applicable law.  If additional permissions
     apply only to part of the Program, that part may be used separately
     under those permissions, but the entire Program remains governed by
     this License without regard to the additional permissions.

       When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part of
     it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

       Notwithstanding any other provision of this License, for material you
     add to a covered work, you may (if authorized by the copyright holders of
     that material) supplement the terms of this License with terms:

         a) Disclaiming warranty or limiting liability differently from the
         terms of sections 15 and 16 of this License; or

         b) Requiring preservation of specified reasonable legal notices or
         author attributions in that material or in the Appropriate Legal
         Notices displayed by works containing it; or

         c) Prohibiting misrepresentation of the origin of that material, or
         requiring that modified versions of such material be marked in
         reasonable ways as different from the original version; or

         d) Limiting the use for publicity purposes of names of licensors or
         authors of the material; or

         e) Declining to grant rights under trademark law for use of some
         trade names, trademarks, or service marks; or

         f) Requiring indemnification of licensors and authors of that
         material by anyone who conveys the material (or modified versions of
         it) with contractual assumptions of liability to the recipient, for
         any liability that these contractual assumptions directly impose on
         those licensors and authors.

       All other non-permissive additional terms are considered "further
     restrictions" within the meaning of section 10.  If the Program as you
     received it, or any part of it, contains a notice stating that it is
     governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document contains
     a further restriction but permits relicensing or conveying under this
     License, you may add to a covered work material governed by the terms
     of that license document, provided that the further restriction does
     not survive such relicensing or conveying.

       If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

       Additional terms, permissive or non-permissive, may be stated in the
     form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

       8. Termination.

       You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights under
     this License (including any patent licenses granted under the third
     paragraph of section 11).

       However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the copyright
     holder fails to notify you of the violation by some reasonable means
     prior to 60 days after the cessation.

       Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from that
     copyright holder, and you cure the violation prior to 30 days after
     your receipt of the notice.

       Termination of your rights under this section does not terminate the
     licenses of parties who have received copies or rights from you under
     this License.  If your rights have been terminated and not permanently
     reinstated, you do not qualify to receive new licenses for the same
     material under section 10.

       9. Acceptance Not Required for Having Copies.

       You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer transmission
     to receive a copy likewise does not require acceptance.  However,
     nothing other than this License grants you permission to propagate or
     modify any covered work.  These actions infringe copyright if you do
     not accept this License.  Therefore, by modifying or propagating a
     covered work, you indicate your acceptance of this License to do so.

       10. Automatic Licensing of Downstream Recipients.

       Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not responsible
     for enforcing compliance by third parties with this License.

       An "entity transaction" is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a covered
     work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party's predecessor in interest had or could
     give under the previous paragraph, plus a right to possession of the
     Corresponding Source of the work from the predecessor in interest, if
     the predecessor has it or can get it with reasonable efforts.

       You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you may
     not impose a license fee, royalty, or other charge for exercise of
     rights granted under this License, and you may not initiate litigation
     (including a cross-claim or counterclaim in a lawsuit) alleging that
     any patent claim is infringed by making, using, selling, offering for
     sale, or importing the Program or any portion of it.

       11. Patents.

       A "contributor" is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.  The
     work thus licensed is called the contributor's "contributor version".

       A contributor's "essential patent claims" are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner, permitted
     by this License, of making, using, or selling its contributor version,
     but do not include claims that would be infringed only as a
     consequence of further modification of the contributor version.  For
     purposes of this definition, "control" includes the right to grant
     patent sublicenses in a manner consistent with the requirements of
     this License.

       Each contributor grants you a non-exclusive, worldwide, royalty-free
     patent license under the contributor's essential patent claims, to
     make, use, sell, offer for sale, import and otherwise run, modify and
     propagate the contents of its contributor version.

       In the following three paragraphs, a "patent license" is any express
     agreement or commitment, however denominated, not to enforce a patent
     (such as an express permission to practice a patent or covenant not to
     sue for patent infringement).  To "grant" such a patent license to a
     party means to make such an agreement or commitment not to enforce a
     patent against the party.

       If you convey a covered work, knowingly relying on a patent license,
     and the Corresponding Source of the work is not available for anyone
     to copy, free of charge and under the terms of this License, through a
     publicly available network server or other readily accessible means,
     then you must either (1) cause the Corresponding Source to be so
     available, or (2) arrange to deprive yourself of the benefit of the
     patent license for this particular work, or (3) arrange, in a manner
     consistent with the requirements of this License, to extend the patent
     license to downstream recipients.  "Knowingly relying" means you have
     actual knowledge that, but for the patent license, your conveying the
     covered work in a country, or your recipient's use of the covered work
     in a country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

       If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate, modify
     or convey a specific copy of the covered work, then the patent license
     you grant is automatically extended to all recipients of the covered
     work and works based on it.

       A patent license is "discriminatory" if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that are
     specifically granted under this License.  You may not convey a covered
     work if you are a party to an arrangement with a third party that is
     in the business of distributing software, under which you make payment
     to the third party based on the extent of your activity of conveying
     the work, and under which the third party grants, to any of the
     parties who would receive the covered work from you, a discriminatory
     patent license (a) in connection with copies of the covered work
     conveyed by you (or copies made from those copies), or (b) primarily
     for and in connection with specific products or compilations that
     contain the covered work, unless you entered into that arrangement,
     or that patent license was granted, prior to 28 March 2007.

       Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

       12. No Surrender of Others' Freedom.

       If conditions are imposed on you (whether by court order, agreement or
     otherwise) that contradict the conditions of this License, they do not
     excuse you from the conditions of this License.  If you cannot convey a
     covered work so as to satisfy simultaneously your obligations under this
     License and any other pertinent obligations, then as a consequence you may
     not convey it at all.  For example, if you agree to terms that obligate you
     to collect a royalty for further conveying from those to whom you convey
     the Program, the only way you could satisfy both those terms and this
     License would be to refrain entirely from conveying the Program.

       13. Use with the GNU Affero General Public License.

       Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a single
     combined work, and to convey the resulting work.  The terms of this
     License will continue to apply to the part which is the covered work,
     but the special requirements of the GNU Affero General Public License,
     section 13, concerning interaction through a network will apply to the
     combination as such.

       14. Revised Versions of this License.

       The Free Software Foundation may publish revised and/or new versions of
     the GNU General Public License from time to time.  Such new versions will
     be similar in spirit to the present version, but may differ in detail to
     address new problems or concerns.

       Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU General
     Public License "or any later version" applies to it, you have the
     option of following the terms and conditions either of that numbered
     version or of any later version published by the Free Software
     Foundation.  If the Program does not specify a version number of the
     GNU General Public License, you may choose any version ever published
     by the Free Software Foundation.

       If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that proxy's
     public statement of acceptance of a version permanently authorizes you
     to choose that version for the Program.

       Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

       15. Disclaimer of Warranty.

       THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
     HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
     OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
     THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
     PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
     IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

       16. Limitation of Liability.

       IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
     WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
     THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
     GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
     USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
     DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
     EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
     SUCH DAMAGES.

       17. Interpretation of Sections 15 and 16.

       If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely approximates
     an absolute waiver of all civil liability in connection with the
     Program, unless a warranty or assumption of liability accompanies a
     copy of the Program in return for a fee.

                          END OF TERMS AND CONDITIONS

                 How to Apply These Terms to Your New Programs

       If you develop a new program, and you want it to be of the greatest
     possible use to the public, the best way to achieve this is to make it
     free software which everyone can redistribute and change under these terms.

       To do so, attach the following notices to the program.  It is safest
     to attach them to the start of each source file to most effectively
     state the exclusion of warranty; and each file should have at least
     the "copyright" line and a pointer to where the full notice is found.

         <one line to give the program's name and a brief idea of what it does.>
         Copyright (C) <year>  <name of author>

         This program is free software: you can redistribute it and/or modify
         it under the terms of the GNU General Public License as published by
         the Free Software Foundation, either version 3 of the License, or
         (at your option) any later version.

         This program is distributed in the hope that it will be useful,
         but WITHOUT ANY WARRANTY; without even the implied warranty of
         MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
         GNU General Public License for more details.

         You should have received a copy of the GNU General Public License
         along with this program.  If not, see <http://www.gnu.org/licenses/>.

     Also add information on how to contact you by electronic and paper mail.

       If the program does terminal interaction, make it output a short
     notice like this when it starts in an interactive mode:

         <program>  Copyright (C) <year>  <name of author>
         This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
         This is free software, and you are welcome to redistribute it
         under certain conditions; type `show c' for details.

     The hypothetical commands `show w' and `show c' should show the appropriate
     parts of the General Public License.  Of course, your program's commands
     might be different; for a GUI interface, you would use an "about box".

       You should also get your employer (if you work as a programmer) or school,
     if any, to sign a "copyright disclaimer" for the program, if necessary.
     For more information on this, and how to apply and follow the GNU GPL, see
     <http://www.gnu.org/licenses/>.

       The GNU General Public License does not permit incorporating your program
     into proprietary programs.  If your program is a subroutine library, you
     may consider it more useful to permit linking proprietary applications with
     the library.  If this is what you want to do, use the GNU Lesser General
     Public License instead of this License.  But first, please read
     <http://www.gnu.org/philosophy/why-not-lgpl.html>.

                        GNU LESSER GENERAL PUBLIC LICENSE
                            Version 3, 29 June 2007

      Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
      Everyone is permitted to copy and distribute verbatim copies
      of this license document, but changing it is not allowed.


       This version of the GNU Lesser General Public License incorporates
     the terms and conditions of version 3 of the GNU General Public
     License, supplemented by the additional permissions listed below.

       0. Additional Definitions.

       As used herein, "this License" refers to version 3 of the GNU Lesser
     General Public License, and the "GNU GPL" refers to version 3 of the GNU
     General Public License.

       "The Library" refers to a covered work governed by this License,
     other than an Application or a Combined Work as defined below.

       An "Application" is any work that makes use of an interface provided
     by the Library, but which is not otherwise based on the Library.
     Defining a subclass of a class defined by the Library is deemed a mode
     of using an interface provided by the Library.

       A "Combined Work" is a work produced by combining or linking an
     Application with the Library.  The particular version of the Library
     with which the Combined Work was made is also called the "Linked
     Version".

       The "Minimal Corresponding Source" for a Combined Work means the
     Corresponding Source for the Combined Work, excluding any source code
     for portions of the Combined Work that, considered in isolation, are
     based on the Application, and not on the Linked Version.

       The "Corresponding Application Code" for a Combined Work means the
     object code and/or source code for the Application, including any data
     and utility programs needed for reproducing the Combined Work from the
     Application, but excluding the System Libraries of the Combined Work.

       1. Exception to Section 3 of the GNU GPL.

       You may convey a covered work under sections 3 and 4 of this License
     without being bound by section 3 of the GNU GPL.

       2. Conveying Modified Versions.

       If you modify a copy of the Library, and, in your modifications, a
     facility refers to a function or data to be supplied by an Application
     that uses the facility (other than as an argument passed when the
     facility is invoked), then you may convey a copy of the modified
     version:

        a) under this License, provided that you make a good faith effort to
        ensure that, in the event an Application does not supply the
        function or data, the facility still operates, and performs
        whatever part of its purpose remains meaningful, or

        b) under the GNU GPL, with none of the additional permissions of
        this License applicable to that copy.

       3. Object Code Incorporating Material from Library Header Files.

       The object code form of an Application may incorporate material from
     a header file that is part of the Library.  You may convey such object
     code under terms of your choice, provided that, if the incorporated
     material is not limited to numerical parameters, data structure
     layouts and accessors, or small macros, inline functions and templates
     (ten or fewer lines in length), you do both of the following:

        a) Give prominent notice with each copy of the object code that the
        Library is used in it and that the Library and its use are
        covered by this License.

        b) Accompany the object code with a copy of the GNU GPL and this license
        document.

       4. Combined Works.

       You may convey a Combined Work under terms of your choice that,
     taken together, effectively do not restrict modification of the
     portions of the Library contained in the Combined Work and reverse
     engineering for debugging such modifications, if you also do each of
     the following:

        a) Give prominent notice with each copy of the Combined Work that
        the Library is used in it and that the Library and its use are
        covered by this License.

        b) Accompany the Combined Work with a copy of the GNU GPL and this license
        document.

        c) For a Combined Work that displays copyright notices during
        execution, include the copyright notice for the Library among
        these notices, as well as a reference directing the user to the
        copies of the GNU GPL and this license document.

        d) Do one of the following:

            0) Convey the Minimal Corresponding Source under the terms of this
            License, and the Corresponding Application Code in a form
            suitable for, and under terms that permit, the user to
            recombine or relink the Application with a modified version of
            the Linked Version to produce a modified Combined Work, in the
            manner specified by section 6 of the GNU GPL for conveying
            Corresponding Source.

            1) Use a suitable shared library mechanism for linking with the
            Library.  A suitable mechanism is one that (a) uses at run time
            a copy of the Library already present on the user's computer
            system, and (b) will operate properly with a modified version
            of the Library that is interface-compatible with the Linked
            Version.

        e) Provide Installation Information, but only if you would otherwise
        be required to provide such information under section 6 of the
        GNU GPL, and only to the extent that such information is
        necessary to install and execute a modified version of the
        Combined Work produced by recombining or relinking the
        Application with a modified version of the Linked Version. (If
        you use option 4d0, the Installation Information must accompany
        the Minimal Corresponding Source and Corresponding Application
        Code. If you use option 4d1, you must provide the Installation
        Information in the manner specified by section 6 of the GNU GPL
        for conveying Corresponding Source.)

       5. Combined Libraries.

       You may place library facilities that are a work based on the
     Library side by side in a single library together with other library
     facilities that are not Applications and are not covered by this
     License, and convey such a combined library under terms of your
     choice, if you do both of the following:

        a) Accompany the combined library with a copy of the same work based
        on the Library, uncombined with any other library facilities,
        conveyed under the terms of this License.

        b) Give prominent notice with the combined library that part of it
        is a work based on the Library, and explaining where to find the
        accompanying uncombined form of the same work.

       6. Revised Versions of the GNU Lesser General Public License.

       The Free Software Foundation may publish revised and/or new versions
     of the GNU Lesser General Public License from time to time. Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.

       Each version is given a distinguishing version number. If the
     Library as you received it specifies that a certain numbered version
     of the GNU Lesser General Public License "or any later version"
     applies to it, you have the option of following the terms and
     conditions either of that published version or of any later version
     published by the Free Software Foundation. If the Library as you
     received it does not specify a version number of the GNU Lesser
     General Public License, you may choose any version of the GNU Lesser
     General Public License ever published by the Free Software Foundation.

       If the Library as you received it specifies that a proxy can decide
     whether future versions of the GNU Lesser General Public License shall
     apply, that proxy's public statement of acceptance of any version is
     permanent authorization for you to choose that version for the
     Library.


File: mpatrol.info,  Node: Function index,  Next: Main index,  Prev: Copying,  Up: Top

Function index
**************

 [index ]
* Menu:

* __mp_addallocentry:                    Functions 6.         (line 169)
* __mp_addfreeentry:                     Functions 6.         (line 181)
* __mp_atexit:                           Functions 6.         (line  13)
* __mp_check:                            Functions 6.         (line 251)
* __mp_clearleaktable:                   Functions 6.         (line 194)
* __mp_cmpcontents:                      Functions 6.         (line 391)
* __mp_edit:                             Functions 6.         (line 350)
* __mp_epilogue:                         Functions 6.         (line 275)
* __mp_function:                         Functions 6.         (line  54)
* __mp_getoption:                        Functions 6.         (line  33)
* __mp_info:                             Functions 6.         (line  78)
* __mp_iterate:                          Functions 6.         (line 140)
* __mp_iterateall:                       Functions 6.         (line 154)
* __mp_leaktable:                        Functions 6.         (line 212)
* __mp_libversion:                       Functions 6.         (line  43)
* __mp_list:                             Functions 6.         (line 357)
* __mp_locprintf:                        Functions 6.         (line 316)
* __mp_logaddr:                          Functions 6.         (line 344)
* __mp_logmemory:                        Functions 6.         (line 332)
* __mp_logstack:                         Functions 6.         (line 337)
* __mp_memorymap:                        Functions 6.         (line 223)
* __mp_nomemory:                         Functions 6.         (line 290)
* __mp_printf:                           Functions 6.         (line 302)
* __mp_printinfo:                        Functions 6.         (line 128)
* __mp_prologue:                         Functions 6.         (line 258)
* __mp_readcontents:                     Functions 6.         (line 375)
* __mp_remcontents:                      Functions 6.         (line 400)
* __mp_setmark:                          Functions 6.         (line  70)
* __mp_setoption:                        Functions 6.         (line  19)
* __mp_setuser:                          Functions 6.         (line  58)
* __mp_snapshot:                         Functions 6.         (line 135)
* __mp_startleaktable:                   Functions 6.         (line 202)
* __mp_stats:                            Functions 6.         (line 233)
* __mp_stopleaktable:                    Functions 6.         (line 207)
* __mp_strerror:                         Functions 6.         (line  48)
* __mp_summary:                          Functions 6.         (line 229)
* __mp_symbol:                           Functions 6.         (line 123)
* __mp_syminfo:                          Functions 6.         (line 109)
* __mp_view:                             Functions 6.         (line 364)
* __mp_vlocprintf:                       Functions 6.         (line 324)
* __mp_vprintf:                          Functions 6.         (line 309)
* __mp_writecontents:                    Functions 6.         (line 383)
* alloca:                                Functions 1.         (line  77)
* bcmp:                                  Functions 5.         (line  76)
* bcopy:                                 Functions 5.         (line  58)
* bzero:                                 Functions 5.         (line  20)
* calloc:                                Functions 1.         (line  25)
* cfree:                                 Functions 1.         (line 276)
* dealloca:                              Functions 1.         (line 285)
* expand:                                Functions 1.         (line 253)
* free:                                  Functions 1.         (line 270)
* malloc:                                Functions 1.         (line  14)
* memalign:                              Functions 1.         (line  37)
* memccpy:                               Functions 5.         (line  29)
* memchr:                                Functions 5.         (line  87)
* memcmp:                                Functions 5.         (line  67)
* memcpy:                                Functions 5.         (line  41)
* memmem:                                Functions 5.         (line  95)
* memmove:                               Functions 5.         (line  50)
* memset:                                Functions 5.         (line  12)
* MP_CALLOC:                             Functions 3.         (line  29)
* MP_FAILURE:                            Functions 3.         (line  77)
* MP_FREE:                               Functions 3.         (line  71)
* MP_MALLOC:                             Functions 3.         (line  17)
* MP_REALLOC:                            Functions 3.         (line  54)
* MP_STRDUP:                             Functions 3.         (line  41)
* operator delete:                       Functions 4.         (line  42)
* operator delete[]:                     Functions 4.         (line  49)
* operator new:                          Functions 4.         (line  18)
* operator new[]:                        Functions 4.         (line  30)
* pvalloc:                               Functions 1.         (line  64)
* realloc:                               Functions 1.         (line 199)
* reallocf:                              Functions 1.         (line 215)
* recalloc:                              Functions 1.         (line 234)
* set_new_handler:                       Functions 4.         (line  56)
* strdup:                                Functions 1.         (line  96)
* strdupa:                               Functions 1.         (line 156)
* strndup:                               Functions 1.         (line 108)
* strndupa:                              Functions 1.         (line 176)
* strnsave:                              Functions 1.         (line 139)
* strsave:                               Functions 1.         (line 125)
* valloc:                                Functions 1.         (line  52)
* xcalloc:                               Functions 2.         (line  24)
* xfree:                                 Functions 2.         (line  62)
* xmalloc:                               Functions 2.         (line  13)
* xrealloc:                              Functions 2.         (line  47)
* xstrdup:                               Functions 2.         (line  35)


File: mpatrol.info,  Node: Main index,  Prev: Function index,  Up: Top

Main index
**********

 [index ]
* Menu:

* -addresses:                            Profiling.          (line  103)
* -alloc:                                Tracing.            (line  118)
* -alloc-byte:                           Options.            (line   49)
* -alloc-stop:                           Options.            (line   53)
* -allow-oflow:                          Options.            (line   57)
* -auto-save:                            Options.            (line   63)
* -base:                                 Tracing.            (line  122)
* -call-graph:                           Profiling.          (line  110)
* -check:                                Options.            (line   67)
* -check-all:                            Options.            (line   71)
* -check-allocs:                         Options.            (line   76)
* -check-fork:                           Options.            (line   80)
* -check-frees:                          Options.            (line   85)
* -check-memory:                         Options.            (line   89)
* -check-reallocs:                       Options.            (line   94)
* -counts:                               Profiling.          (line  115)
* -def-align:                            Options.            (line   98)
* -delay:                                Tracing.            (line  128)
* -dynamic:                              Options.            (line  102)
* -edit:                                 Options.            (line  109)
* -editor:                               The mpedit command. (line   30)
* -fail-freq:                            Options.            (line  114)
* -fail-seed:                            Options.            (line  118)
* -free:                                 Tracing.            (line  135)
* -free-byte:                            Options.            (line  122)
* -free-stop:                            Options.            (line  126)
* -graph-file:                           Profiling.          (line  122)
* -gui:                                  Tracing.            (line   90)
* -hatf-file:                            Tracing.            (line   80)
* -height:                               Tracing.            (line  139)
* -help:                                 Options.            (line  130)
* -ignore:                               The mleak command.  (line   22)
* -internal:                             Tracing.            (line  143)
* -large-bound:                          Options.            (line  133)
* -leak-table:                           Options.            (line  138)
* -leaks:                                Profiling.          (line  128)
* -limit:                                Options.            (line  143)
* -list:                                 Options.            (line  148)
* -listing:                              The mpedit command. (line   52)
* -log-all:                              Options.            (line  153)
* -log-allocs:                           Options.            (line  157)
* -log-file:                             Options.            (line  161)
* -log-frees:                            Options.            (line  165)
* -log-memory:                           Options.            (line  169)
* -log-reallocs:                         Options.            (line  173)
* -match:                                The hexwords command.
                                                             (line   57)
* -max-stack:                            The mleak command.  (line   29)
* -maximum:                              The hexwords command.
                                                             (line   66)
* -medium-bound:                         Options.            (line  177)
* -minimum:                              The hexwords command.
                                                             (line   66)
* -no-free:                              Options.            (line  182)
* -no-protect:                           Options.            (line  187)
* -oflow-byte:                           Options.            (line  192)
* -oflow-size:                           Options.            (line  196)
* -oflow-watch:                          Options.            (line  200)
* -page-alloc-lower:                     Options.            (line  204)
* -page-alloc-upper:                     Options.            (line  209)
* -preserve:                             Options.            (line  214)
* -prof:                                 Options.            (line  218)
* -prof-file:                            Options.            (line  222)
* -prog-file:                            Options.            (line  226)
* -read-env:                             Options.            (line  230)
* -realloc-stop:                         Options.            (line  237)
* -safe-signals:                         Options.            (line  241)
* -show-all:                             Options.            (line  246)
* -show-env:                             Options.            (line  251)
* -show-free:                            Options.            (line  257)
* -show-freed:                           Options.            (line  261)
* -show-map:                             Options.            (line  265)
* -show-symbols:                         Options.            (line  269)
* -show-unfreed:                         Options.            (line  274)
* -sim-file:                             Tracing.            (line   73)
* -skip:                                 The mpsym command.  (line   36)
* -small-bound:                          Options.            (line  279)
* -source:                               Tracing.            (line   64)
* -source-dir:                           The mpedit command. (line   15)
* -space:                                Tracing.            (line  147)
* -stack-depth:                          Profiling.          (line  133)
* -threads:                              Options.            (line  284)
* -trace:                                Options.            (line  290)
* -trace-file:                           Options.            (line  294)
* -unalloc:                              Tracing.            (line  151)
* -unfreed-abort:                        Options.            (line  298)
* -use-debug:                            Options.            (line  303)
* -use-mmap:                             Options.            (line  308)
* -verbose:                              Tracing.            (line   64)
* -version:                              Options.            (line  312)
* -view-height:                          Tracing.            (line  155)
* -view-width:                           Tracing.            (line  159)
* -width:                                Tracing.            (line  163)
* .cshrc:                                The mpatrol command.
                                                             (line   92)
* .gdbinit:                              Using with a debugger.
                                                             (line  202)
* .profile:                              The mpatrol command.
                                                             (line   92)
* 32-bit:                                Building.           (line   22)
* 64-bit:                                Building.           (line   22)
* __mp_errno:                            Library functions.  (line  183)
* __mp_fini_ functions:                  Library functions.  (line   27)
* __mp_init_ functions:                  Library functions.  (line   27)
* _RLD_LIST:                             The mpatrol command.
                                                             (line   13)
* a.out:                                 Examples.           (line   20)
* ABI:                                   Call stacks and symbol tables.
                                                             (line    6)
* acknowledgements:                      Foreword.           (line   71)
* adding mpatrol:                        Adding mpatrol.     (line    6)
* address space:                         Tracing.            (line  100)
* address, physical:                     Virtual memory.     (line   14)
* address, virtual:                      Virtual memory.     (line   14)
* ADI:                                   About the author.   (line   11)
* AIX, IBM RS/6000:                      Supported systems.  (line   13)
* alignment:                             Library behaviour.  (line   14)
* all (make target):                     Installation.       (line   61)
* alloca:                                Dynamic memory allocations.
                                                             (line   41)
* allocated blocks:                      Example 1.          (line  528)
* allocation algorithm:                  How it works.       (line   16)
* allocation bin table:                  Profiling.          (line  284)
* allocation bins:                       Profiling.          (line  284)
* allocation boundaries:                 Profiling.          (line   59)
* allocation byte:                       General errors.     (line   20)
* allocation index:                      Example 1.          (line  157)
* allocation information:                Functions 6.        (line   78)
* allocation type:                       Example 1.          (line  147)
* ALLOCBYTE:                             Environment.        (line   23)
* ALLOCSTOP:                             Environment.        (line   32)
* ALLOVF:                                Diagnostic messages.
                                                             (line   32)
* ALLOWOFLOW:                            Environment.        (line   40)
* ALLZER:                                Diagnostic messages.
                                                             (line   63)
* AM_WITH_MPATROL:                       Adding mpatrol.     (line  134)
* amalloc:                               Improving performance.
                                                             (line   39)
* Amiga 4000/040:                        Installation.       (line    6)
* Amiga notes:                           Amiga notes.        (line    6)
* AmigaOS, Motorola 680x0:               Supported systems.  (line  381)
* Aminet:                                Installation.       (line  143)
* Analog Devices:                        About the author.   (line   11)
* ANSI:                                  Improving performance.
                                                             (line  133)
* application binary interface:          Call stacks and symbol tables.
                                                             (line    6)
* AProbe:                                Related software.   (line   89)
* APurify:                               Related software.   (line  107)
* AR:                                    Installation.       (line   42)
* ARCH:                                  Building.           (line    6)
* archive library:                       Features.           (line   30)
* arenas:                                Improving performance.
                                                             (line   39)
* articles:                              References.         (line    6)
* assembler:                             Profiling.          (line  473)
* ATOM:                                  Related software.   (line 1658)
* author, contacting:                    Foreword.           (line   55)
* author, details:                       About the author.   (line    6)
* autoconf:                              Installation.       (line   21)
* automake:                              Installation.       (line   21)
* AutomatedQA:                           Related software.   (line 1099)
* AUTOSAVE:                              Environment.        (line   48)
* backwards compatibility:               Linking.            (line   91)
* BADALN:                                Diagnostic messages.
                                                             (line   83)
* base address:                          Tracing.            (line  100)
* bash:                                  The mpatrol command.
                                                             (line   92)
* BASIC:                                 Memory allocations. (line    6)
* batch testing:                         Testing.            (line   36)
* best fit:                              How it works.       (line   16)
* BFD:                                   Examples.           (line   36)
* bin:                                   Profiling.          (line  284)
* binary:                                Environment.        (line   12)
* binary file:                           Profiling.          (line  217)
* bit bucket:                            Running.            (line  294)
* blocks:                                Example 1.          (line  528)
* BoundsChecker:                         Related software.   (line  124)
* breakpoint:                            Using with a debugger.
                                                             (line    6)
* bsdmalloc(3x):                         Related software.   (line 1791)
* BSS:                                   Static memory allocations.
                                                             (line   14)
* buffers, overflow:                     Overwrites and underwrites.
                                                             (line   28)
* bug reports:                           Foreword.           (line   42)
* bugs:                                  Notes.              (line    6)
* building questions:                    Building.           (line    6)
* building the library:                  Installation.       (line    6)
* bus errors:                            Library behaviour.  (line   14)
* bytes compared:                        Example 1.          (line  560)
* bytes copied:                          Example 1.          (line  564)
* bytes located:                         Example 1.          (line  562)
* bytes set:                             Example 1.          (line  566)
* C:                                     Memory allocations. (line    6)
* C++:                                   Memory allocations. (line    6)
* C++ Debugging Support Library (libcwd): Related software.  (line  141)
* C++ mangled names:                     Example 1.          (line  210)
* call sites:                            Profiling.          (line  326)
* call stacks:                           Call stacks and symbol tables.
                                                             (line    6)
* call-by-value:                         Stack memory allocations.
                                                             (line    6)
* callback functions:                    Example 1.          (line  458)
* calling convention:                    Call stacks and symbol tables.
                                                             (line    6)
* CC:                                    Installation.       (line   42)
* CCIR:                                  About the author.   (line    6)
* Ccmalloc:                              Related software.   (line  158)
* CenterLine Development Systems:        Related software.   (line 1448)
* CFLAGS:                                Installation.       (line   42)
* ChangeLog:                             Files.              (line   54)
* Chaperon:                              Related software.   (line  175)
* CHECK:                                 Environment.        (line   59)
* CHECKALL:                              Environment.        (line   72)
* CHECKALLOCS:                           Environment.        (line   76)
* Checker:                               Related software.   (line  192)
* CHECKFORK:                             Environment.        (line   80)
* CHECKFREES:                            Environment.        (line   87)
* CHECKMEMORY:                           Environment.        (line   91)
* CHECKREALLOCS:                         Environment.        (line   95)
* CHECKSUMS:                             Installation.       (line   16)
* children:                              Profiling.          (line  422)
* CISC:                                  Call stacks and symbol tables.
                                                             (line   68)
* clean (make target):                   Installation.       (line   61)
* cleanup:                               Installation.       (line   21)
* clobber (make target):                 Installation.       (line   61)
* CMEM:                                  Related software.   (line  211)
* CMM (Customisable Memory Manager):     Related software.   (line  229)
* COFF:                                  Examples.           (line   26)
* command line options:                  Options.            (line    6)
* command pipe:                          Tracing.            (line  381)
* Commodore-Amiga, Inc.:                 Related software.   (line 1414)
* common variables:                      Static memory allocations.
                                                             (line   28)
* compiler:                              Installation.       (line   42)
* compiling:                             Installation.       (line   42)
* condenseleaklog:                       The mleak command.  (line   45)
* configure:                             Installation.       (line   21)
* contacting the author:                 Foreword.           (line   55)
* context listing:                       The mpedit command. (line   52)
* contributors:                          Foreword.           (line   71)
* core file:                             Running.            (line  204)
* corruption:                            Heap corruption.    (line    6)
* crash:                                 Example 1.          (line    6)
* csh:                                   The mpatrol command.
                                                             (line   92)
* CSRI malloc:                           Related software.   (line  249)
* cycles:                                Profiling.          (line   33)
* data sections:                         Static memory allocations.
                                                             (line   14)
* DBAlloc:                               Related software.   (line  268)
* Dbmalloc:                              dbmalloc.           (line    6)
* Debauch:                               Related software.   (line  319)
* Debian package:                        Installation.       (line  132)
* Debug Heap:                            Related software.   (line  336)
* debugger:                              Using with a debugger.
                                                             (line    6)
* debugging:                             Using with a debugger.
                                                             (line    6)
* debugging information:                 Call stacks and symbol tables.
                                                             (line   89)
* DebugObject:                           Related software.   (line  353)
* decimal:                               Environment.        (line   12)
* declarations, tentative:               Static memory allocations.
                                                             (line   28)
* DEFALIGN:                              Environment.        (line  100)
* demangler:                             Example 1.          (line  210)
* DG/UX, Intel 80x86:                    Supported systems.  (line   44)
* DG/UX, Motorola 88xx0:                 Supported systems.  (line   59)
* diagnostic messages:                   Diagnostic messages.
                                                             (line    6)
* Digital Equipment Corporation:         Related software.   (line 1658)
* direct allocation table:               Profiling.          (line  304)
* direct allocations:                    Profiling.          (line  304)
* distclean (make target):               Installation.       (line   21)
* DLLs:                                  Call stacks and symbol tables.
                                                             (line   96)
* Dmalloc:                               dmalloc.            (line    6)
* documentation:                         Installation.       (line  110)
* documentation formats:                 Documentation.      (line    6)
* documentation questions:               Documentation.      (line    6)
* dot:                                   Profiling.          (line   23)
* dotty:                                 Profiling.          (line   23)
* DPCRTLMM:                              Related software.   (line  388)
* driver:                                Profiling.          (line  473)
* DRS/NX, SPARC:                         Supported systems.  (line   71)
* dumping memory:                        Example 4.          (line   46)
* duplicate symbols:                     Linking.            (line   59)
* DVI:                                   Documentation.      (line   29)
* DWARF:                                 How it works.       (line   76)
* dynamic link libraries:                Call stacks and symbol tables.
                                                             (line   96)
* dynamic linker:                        Call stacks and symbol tables.
                                                             (line   96)
* dynamic linking:                       Call stacks and symbol tables.
                                                             (line   96)
* dynamic memory allocations:            Dynamic memory allocations.
                                                             (line    6)
* DYNIX/ptx, Intel 80x86:                Supported systems.  (line   86)
* DYNLINK:                               Building.           (line    6)
* Edinburgh:                             About the author.   (line    6)
* Edinburgh Portable Compilers:          About the author.   (line   11)
* EDIT:                                  Environment.        (line  106)
* EDITOR:                                The mpedit command. (line   30)
* editor:                                The mpedit command. (line    6)
* Electric Fence:                        Related software.   (line  406)
* Electric Software, Inc.:               Related software.   (line  527)
* ELF32:                                 Examples.           (line   31)
* ELF64:                                 Examples.           (line   31)
* elvis:                                 The mpedit command. (line   41)
* emacs:                                 The mpedit command. (line   41)
* embedded libraries:                    The mpatrol command.
                                                             (line   67)
* embedded systems:                      Operating system support.
                                                             (line    6)
* endianness:                            Profiling.          (line   76)
* Enforcer:                              Related software.   (line  423)
* enhancements:                          Notes.              (line    6)
* entry-point:                           Example 1.          (line  200)
* ENVIRON:                               Building.           (line    6)
* environment:                           Environment.        (line    6)
* EPC:                                   About the author.   (line   11)
* epilogue function:                     Example 1.          (line  458)
* error abbreviation code:               Example 1.          (line  265)
* error severity:                        Example 1.          (line  257)
* errors:                                Diagnostic messages.
                                                             (line    6)
* errors, run-time:                      Overview.           (line    6)
* event:                                 Tracing.            (line  285)
* examples:                              Examples.           (line    6)
* exec:                                  Library behaviour.  (line   45)
* executable files:                      Call stacks and symbol tables.
                                                             (line   79)
* extensions:                            Tools.              (line    6)
* extern inline:                         Building.           (line  131)
* extra:                                 Installation.       (line  158)
* FAILFREQ:                              Environment.        (line  116)
* FAILSEED:                              Environment.        (line  123)
* failure frequency:                     Testing.            (line   22)
* failure seed:                          Testing.            (line   22)
* FAQ:                                   Frequently asked questions.
                                                             (line    6)
* fatal errors:                          Example 1.          (line  257)
* fault, page:                           Virtual memory.     (line   38)
* FDA (Free Debug Allocator):            Related software.   (line  440)
* features:                              Features.           (line    6)
* fence posts:                           Overwrites and underwrites.
                                                             (line   28)
* file formats:                          File formats.       (line    6)
* file scope variables:                  Static memory allocations.
                                                             (line    6)
* files questions:                       Files.              (line    6)
* files, mapping:                        Virtual memory.     (line   48)
* first fit:                             How it works.       (line   16)
* fitting allocations:                   Example 3.          (line   73)
* foreword:                              Foreword.           (line    6)
* fork:                                  Library behaviour.  (line   45)
* forked processes:                      Library behaviour.  (line   45)
* FORMAT:                                Building.           (line    6)
* format string:                         Profiling.          (line  489)
* Fortify:                               Related software.   (line  457)
* FORTRAN:                               Memory allocations. (line    6)
* frame pointer:                         Running.            (line  103)
* FRDCOR:                                Diagnostic messages.
                                                             (line  105)
* FRDOPN:                                Diagnostic messages.
                                                             (line  138)
* FRDOVF:                                Diagnostic messages.
                                                             (line  157)
* FRECOR:                                Diagnostic messages.
                                                             (line  189)
* free blocks:                           Example 1.          (line  534)
* free byte:                             General errors.     (line   20)
* free memory:                           General errors.     (line   34)
* FreeBSD, Intel 80x86:                  Supported systems.  (line   94)
* FREEBYTE:                              Environment.        (line  131)
* freed blocks:                          Example 1.          (line  532)
* freed memory:                          General errors.     (line   34)
* freed queue:                           Example 1.          (line  502)
* FREESTOP:                              Environment.        (line  141)
* FREMRK:                                Diagnostic messages.
                                                             (line  213)
* FRENUL:                                Diagnostic messages.
                                                             (line  237)
* FREOPN:                                Diagnostic messages.
                                                             (line  257)
* frequently asked questions:            Frequently asked questions.
                                                             (line    6)
* FreshMeat:                             Foreword.           (line   55)
* function call stacks:                  Call stacks and symbol tables.
                                                             (line    6)
* functions:                             Functions.          (line    6)
* functions, callback:                   Example 1.          (line  458)
* functions, handler:                    Example 1.          (line  458)
* future enhancements:                   Notes.              (line    6)
* g++:                                   Example 1.          (line  192)
* Gabe's Debug Library:                  Related software.   (line  475)
* garbage collector:                     Dynamic memory allocations.
                                                             (line   14)
* GC (Garbage Collector):                Related software.   (line  492)
* GCAlloc:                               Related software.   (line  510)
* gcc:                                   Example 1.          (line  192)
* gdb:                                   Using with a debugger.
                                                             (line    6)
* general errors:                        General errors.     (line    6)
* Geodesic Systems:                      Related software.   (line  561)
* getting updates:                       Foreword.           (line   55)
* GlowCode:                              Related software.   (line  527)
* GMemLogger:                            Related software.   (line  544)
* GNU C library:                         Related software.   (line 1805)
* gprof:                                 Profiling.          (line   23)
* graph:                                 Profiling.          (line   23)
* graph specification file:              Profiling.          (line   23)
* graphical user interface:              Tracing.            (line   90)
* GraphViz:                              Profiling.          (line   23)
* Great Circle:                          Related software.   (line  561)
* Green Hills Software, Inc.:            Related software.   (line 1396)
* GUI:                                   Tracing.            (line   90)
* GUISUP:                                Installation.       (line   42)
* halting the library:                   Using with a debugger.
                                                             (line    6)
* handler functions:                     Example 1.          (line  458)
* hash table:                            Leak table.         (line    6)
* HATF:                                  Tracing.            (line   80)
* HAVE_MPALLOC:                          Adding mpatrol.     (line  148)
* HAVE_MPATROL:                          Adding mpatrol.     (line  148)
* heap:                                  Dynamic memory allocations.
                                                             (line   14)
* Heap Allocation Trace Format:          Tracing.            (line   80)
* heap corruption:                       Heap corruption.    (line    6)
* heap usage:                            Example 1.          (line  557)
* HeapAgent:                             Related software.   (line  579)
* HeapCheck:                             Related software.   (line  596)
* heapdiff:                              heapdiff.           (line    6)
* HeapManager:                           Related software.   (line  614)
* HELP:                                  Environment.        (line  149)
* hexadecimal:                           Environment.        (line   12)
* hexwords:                              The hexwords command.
                                                             (line    6)
* hexwords command:                      The hexwords command.
                                                             (line    6)
* hidden memory:                         How it works.       (line   50)
* hints:                                 Improving performance.
                                                             (line  122)
* HP/UX, HP PA/RISC:                     Supported systems.  (line  110)
* Hyperlearning Center:                  References.         (line  112)
* IBM Corporation:                       Related software.   (line  336)
* IDH:                                   Related software.   (line  631)
* illegal memory accesses:               Example 3.          (line  119)
* ILLMEM:                                Diagnostic messages.
                                                             (line  274)
* implementation details:                How it works.       (line    6)
* improving performance:                 Improving performance.
                                                             (line    6)
* INCOMP:                                Diagnostic messages.
                                                             (line  302)
* INFOPATH:                              Documentation.      (line   43)
* information about an allocation:       Functions 6.        (line   78)
* inline functions:                      Building.           (line  107)
* installation:                          Installation.       (line    6)
* instrumentation:                       Related software.   (line   40)
* Insure++:                              Related software.   (line  648)
* integration:                           Integration.        (line    6)
* Interix, Intel 80x86:                  Supported systems.  (line  119)
* internal blocks:                       Example 1.          (line  549)
* Intuitive Systems, Inc.:               Related software.   (line 1466)
* Inuse:                                 Installation.       (line   70)
* IRIX, MIPS:                            Supported systems.  (line  137)
* JMalloc:                               Related software.   (line  668)
* JNI:                                   Adding mpatrol.     (line  129)
* JProbe:                                Related software.   (line  685)
* Kernel Group, The:                     Related software.   (line 1765)
* KL Group:                              Related software.   (line  685)
* known bugs:                            Notes.              (line    6)
* ksh:                                   The mpatrol command.
                                                             (line   92)
* LARGEBOUND:                            Environment.        (line  153)
* LaTeX:                                 Installation.       (line  110)
* LD:                                    Installation.       (line   42)
* LD_LIBRARY_PATH:                       Linking.            (line   80)
* LD_PRELOAD:                            The mpatrol command.
                                                             (line   13)
* LD_RUN_PATH:                           Linking.            (line   80)
* ldconfig:                              Installation.       (line   78)
* Leak:                                  Related software.   (line  703)
* leak table:                            Leak table.         (line    6)
* LeakBug:                               Related software.   (line  739)
* Leakers:                               Related software.   (line  759)
* leaks:                                 Memory leaks.       (line    6)
* LEAKTABLE:                             Environment.        (line  159)
* LeakTracer:                            Related software.   (line  777)
* Leaky:                                 Related software.   (line  794)
* LessTif:                               Building.           (line  161)
* LhA archive:                           Installation.       (line  132)
* LibKmalloc:                            Related software.   (line  811)
* library behaviour:                     Library behaviour.  (line    6)
* library functions:                     Library functions.  (line    6)
* library settings:                      Logging and tracing.
                                                             (line   46)
* library statistics:                    Logging and tracing.
                                                             (line   46)
* library, archive:                      Features.           (line   30)
* library, building:                     Installation.       (line    6)
* library, mpatrol:                      Overview.           (line    6)
* library, shared:                       Features.           (line   30)
* library, thread-safe:                  Features.           (line   30)
* LibSafe:                               Related software.   (line  828)
* libtool:                               Installation.       (line   21)
* libunwind:                             Call stacks and symbol tables.
                                                             (line   39)
* lifetime:                              Tracing.            (line  315)
* LIMIT:                                 Environment.        (line  166)
* limitations:                           Notes.              (line    6)
* limiting available memory:             Testing.            (line   11)
* line number table:                     Call stacks and symbol tables.
                                                             (line   89)
* linker:                                Installation.       (line   42)
* linking:                               Installation.       (line   42)
* linking questions:                     Linking.            (line    6)
* links, symbolic:                       Installation.       (line   78)
* lint:                                  Installation.       (line   61)
* lint (make target):                    Installation.       (line   61)
* Linux Software Map:                    Installation.       (line  155)
* Linux, Intel 80x86:                    Supported systems.  (line  151)
* Linux, Motorola 680x0:                 Supported systems.  (line  195)
* list:                                  The mpedit command. (line   52)
* LIST:                                  Environment.        (line  176)
* local static variables:                Static memory allocations.
                                                             (line    6)
* log file:                              Example 1.          (line   38)
* LOGALL:                                Environment.        (line  186)
* LOGALLOCS:                             Environment.        (line  190)
* LOGDIR:                                Environment.        (line  195)
* LOGFILE:                               Environment.        (line  195)
* LOGFREES:                              Environment.        (line  209)
* logging:                               Logging and tracing.
                                                             (line    6)
* LOGMEMORY:                             Environment.        (line  214)
* LOGREALLOCS:                           Environment.        (line  220)
* low memory handler function:           Example 1.          (line  460)
* LSM:                                   Installation.       (line  155)
* LynxOS, Intel 80x86:                   Supported systems.  (line  235)
* LynxOS, PowerPC:                       Supported systems.  (line  261)
* magic:                                 File formats.       (line    6)
* make:                                  Installation.       (line   61)
* Makefile:                              Installation.       (line   42)
* Malloc Debug:                          Related software.   (line  845)
* Malloc Debug Library:                  Related software.   (line  861)
* malloc libraries for Solaris:          Related software.   (line 1782)
* malloc(3c):                            Related software.   (line 1787)
* malloc(3x):                            Related software.   (line 1788)
* Malloc_Dbg:                            Related software.   (line  370)
* MallocTrace:                           Related software.   (line  877)
* mallopt:                               The mpatrol command.
                                                             (line   92)
* MalTrace:                              Related software.   (line  893)
* mangled names:                         Example 1.          (line  210)
* MANPATH:                               Documentation.      (line   53)
* MANROFFSEQ:                            Documentation.      (line   77)
* manual layout:                         Foreword.           (line   30)
* manual pages:                          Installation.       (line  102)
* map of memory:                         Logging and tracing.
                                                             (line   56)
* mapmalloc(3x):                         Related software.   (line 1797)
* mapping files:                         Virtual memory.     (line   48)
* Mark_Malloc:                           Related software.   (line  910)
* marked blocks:                         Example 1.          (line  530)
* MAXALN:                                Diagnostic messages.
                                                             (line  332)
* MCheck:                                Related software.   (line  926)
* md5sum:                                Installation.       (line   16)
* MEDIUMBOUND:                           Environment.        (line  225)
* MEM:                                   Related software.   (line  943)
* MemCheck:                              Related software.   (line  960)
* MemDebug:                              Related software.   (line  994)
* MemLeak:                               Related software.   (line 1011)
* Memory Advisor:                        Related software.   (line 1030)
* memory allocation profiling:           Profiling.          (line    6)
* memory allocation tracing:             Tracing.            (line    6)
* memory allocations:                    Memory allocations. (line    6)
* memory allocations, dynamic:           Dynamic memory allocations.
                                                             (line    6)
* memory allocations, stack:             Stack memory allocations.
                                                             (line    6)
* memory allocations, static:            Static memory allocations.
                                                             (line    6)
* memory blocks:                         Example 1.          (line  528)
* memory debugger:                       Related software.   (line   59)
* memory dump:                           Example 4.          (line   46)
* memory leak table:                     Profiling.          (line  390)
* memory leaks:                          Memory leaks.       (line    6)
* memory management interface:           Operating system support.
                                                             (line    6)
* Memory Management Reference:           References.         (line   89)
* memory management unit:                Virtual memory.     (line   14)
* memory map:                            Logging and tracing.
                                                             (line   56)
* memory mapped files:                   Virtual memory.     (line   48)
* memory protection:                     Virtual memory.     (line   59)
* Memory Sleuth:                         Related software.   (line 1050)
* memory usage:                          Example 1.          (line  516)
* Memory Validator:                      Related software.   (line 1067)
* memory, physical:                      Virtual memory.     (line    6)
* memory, virtual:                       Virtual memory.     (line    6)
* Memprof:                               Related software.   (line 1083)
* Memproof:                              Related software.   (line 1099)
* MemTest:                               Related software.   (line 1116)
* MemTrace:                              Related software.   (line 1134)
* MemWatch:                              Related software.   (line 1169)
* message passing:                       Threads.            (line    6)
* mgauge:                                mgauge.             (line    6)
* MicroQuill:                            Related software.   (line  579)
* Microsoft:                             Supported systems.  (line  444)
* misaligned data:                       Library behaviour.  (line   14)
* misaligned memory accesses:            Virtual memory.     (line   84)
* MISMAT:                                Diagnostic messages.
                                                             (line  357)
* mkfifo:                                Tracing.            (line  400)
* mknod:                                 Tracing.            (line  400)
* ML:                                    Dynamic memory allocations.
                                                             (line   14)
* mleak:                                 The mleak command.  (line    6)
* mleak command:                         The mleak command.  (line    6)
* MM (Shared Memory Library):            Related software.   (line 1220)
* Mmalloc:                               Related software.   (line 1254)
* mmap:                                  Library behaviour.  (line   62)
* MMU:                                   Virtual memory.     (line   14)
* modules:                               How it works.       (line  103)
* Motif:                                 Building.           (line  161)
* Mozilla:                               References.         (line   58)
* MP_ALIGN:                              Building.           (line  119)
* MP_BUILTINSTACK_SUPPORT:               Call stacks and symbol tables.
                                                             (line   39)
* MP_DELETE:                             Functions 4.        (line    6)
* MP_GLIBCBACKTRACE_SUPPORT:             Call stacks and symbol tables.
                                                             (line   39)
* MP_GUI_SUPPORT:                        Building.           (line  174)
* MP_INLINE:                             Building.           (line  131)
* MP_LIBRARYSTACK_SUPPORT:               Call stacks and symbol tables.
                                                             (line   39)
* MP_LIBUNWIND_SUPPORT:                  Call stacks and symbol tables.
                                                             (line   39)
* MP_NEW:                                Functions 4.        (line    6)
* MP_NEW_NOTHROW:                        Functions 4.        (line    6)
* MP_NOCPLUSPLUS:                        Functions 4.        (line    6)
* MP_NONEWDELETE:                        Functions 4.        (line    6)
* MP_USE_ATEXIT:                         Running.            (line   22)
* mpatrol:                               Overview.           (line    6)
* mpatrol command:                       The mpatrol command.
                                                             (line    6)
* mpatrol features:                      Features.           (line    6)
* mpatrol library:                       Overview.           (line    6)
* mpatrol.h:                             Functions.          (line    6)
* mpatrol.log:                           Example 1.          (line   38)
* mpatrol.out:                           Profiling.          (line   45)
* mpatrol.trace:                         Tracing.            (line   24)
* MPATROL_OPTIONS:                       Environment.        (line    6)
* MPATROL_SOURCEPATH:                    The mpedit command. (line   15)
* MPATROL_VERSION:                       Functions.          (line    6)
* mpdebug.h:                             Adding mpatrol.     (line  148)
* mpedit:                                The mpedit command. (line    6)
* mpedit command:                        The mpedit command. (line    6)
* MPR:                                   Related software.   (line 1272)
* mprof:                                 Profiling.          (line   66)
* Mprof:                                 Related software.   (line 1290)
* mprof command:                         Profiling.          (line   66)
* mpsym:                                 The mpsym command.  (line    6)
* mpsym command:                         The mpsym command.  (line    6)
* mptrace:                               Tracing.            (line   31)
* mptrace command:                       Tracing.            (line   31)
* MSS (Memory Supervision System):       Related software.   (line 1308)
* mtmalloc(3t):                          Related software.   (line 1794)
* mtrace:                                mtrace.             (line    6)
* MuForce:                               Related software.   (line 1344)
* MuGuardianAngel:                       Related software.   (line 1362)
* MuLib:                                 Related software.   (line 1379)
* MULTI:                                 Related software.   (line 1396)
* multi-processor systems:               Threads.            (line   15)
* Mungwall:                              Related software.   (line 1414)
* mupdate:                               Files.              (line   54)
* mutexes:                               Threads.            (line   40)
* nano:                                  The mpedit command. (line   41)
* NDEBUG:                                Functions.          (line   14)
* Netware notes:                         Netware notes.      (line    6)
* NEWS:                                  Files.              (line   54)
* NJAMD (Not Just Another Malloc Debugger): Related software.
                                                             (line 1430)
* NOFREE:                                Environment.        (line  231)
* non-static local variables:            Stack memory allocations.
                                                             (line    6)
* NOPROTECT:                             Environment.        (line  243)
* NOTALL:                                Diagnostic messages.
                                                             (line  384)
* notes:                                 Notes.              (line    6)
* notes for all platforms:               Generic notes.      (line    6)
* notes for Amiga platforms:             Amiga notes.        (line    6)
* notes for Netware platforms:           Netware notes.      (line    6)
* notes for UNIX platforms:              UNIX notes.         (line    6)
* notes for Windows platforms:           Windows notes.      (line    6)
* NULOPN:                                Diagnostic messages.
                                                             (line  408)
* NuMega Corporation:                    Related software.   (line  124)
* object files:                          Call stacks and symbol tables.
                                                             (line   79)
* ObjectCenter:                          Related software.   (line 1448)
* OC Systems:                            Related software.   (line   89)
* octal:                                 Environment.        (line   12)
* OFLAGS:                                Installation.       (line   42)
* OFLOWBYTE:                             Environment.        (line  252)
* OFLOWSIZE:                             Environment.        (line  260)
* OFLOWWATCH:                            Environment.        (line  271)
* Onyx Technology:                       Related software.   (line 1517)
* OpenNT:                                Supported systems.  (line  119)
* operating systems:                     Operating system support.
                                                             (line    6)
* optimisation:                          Installation.       (line   42)
* Optimizeit:                            Related software.   (line 1466)
* option summary:                        Environment.        (line  149)
* options:                               Options.            (line    6)
* original implementation:               How it works.       (line   30)
* other programs:                        Related software.   (line    6)
* OUTMEM:                                Diagnostic messages.
                                                             (line  428)
* overflow buffers:                      Overwrites and underwrites.
                                                             (line   28)
* overflow byte:                         Overwrites and underwrites.
                                                             (line   28)
* overflow size:                         Overwrites and underwrites.
                                                             (line   28)
* overview:                              Overview.           (line    6)
* overwrites:                            Overwrites and underwrites.
                                                             (line    6)
* page:                                  Virtual memory.     (line   14)
* page fault:                            Virtual memory.     (line   38)
* page size:                             Virtual memory.     (line   14)
* PAGEALLOC:                             Environment.        (line  278)
* pageheap:                              Related software.   (line 1822)
* papers:                                References.         (line    6)
* parallel programming:                  Threads.            (line   15)
* parameter variables:                   Stack memory allocations.
                                                             (line    6)
* Parasoft:                              Related software.   (line  648)
* parents:                               Profiling.          (line  422)
* Pascal:                                Memory allocations. (line    6)
* PATH:                                  Linking.            (line   80)
* PE:                                    Examples.           (line   59)
* peak memory usage:                     Example 1.          (line  516)
* performance bottleneck:                Improving performance.
                                                             (line  108)
* performance improvements:              Improving performance.
                                                             (line    6)
* performance times:                     Library performance.
                                                             (line    6)
* physical address:                      Virtual memory.     (line   14)
* physical memory:                       Virtual memory.     (line    6)
* pico:                                  The mpedit command. (line   41)
* pipe:                                  Tracing.            (line  381)
* PKG package:                           Installation.       (line  132)
* platform-independent notes:            Generic notes.      (line    6)
* platforms:                             Supported systems.  (line    6)
* PLATINUM Technology:                   Related software.   (line 1030)
* Plumber:                               Related software.   (line 1483)
* portability:                           Improving performance.
                                                             (line  133)
* porting:                               Porting.            (line    6)
* POSIX threads:                         Threads.            (line   32)
* postscript:                            Documentation.      (line   29)
* prelinker:                             Profiling.          (line  473)
* preprocessor:                          Profiling.          (line  473)
* PRESERVE:                              Environment.        (line  289)
* preserve freed contents:               General errors.     (line   50)
* prevent freeing memory:                General errors.     (line   34)
* printing:                              Installation.       (line  110)
* process id:                            Options.            (line   17)
* PROF:                                  Environment.        (line  294)
* profdiff:                              Profiling.          (line  540)
* PROFDIR:                               Environment.        (line  300)
* PROFFILE:                              Environment.        (line  300)
* profiling:                             Profiling.          (line    6)
* profiling file format:                 Profiling file format.
                                                             (line    6)
* PROGFILE:                              Environment.        (line  314)
* program counter:                       Call stacks and symbol tables.
                                                             (line   30)
* programs:                              Related software.   (line    6)
* prologue function:                     Example 1.          (line  458)
* PRVFRD:                                Diagnostic messages.
                                                             (line  452)
* Purify:                                Related software.   (line 1500)
* QC:                                    Related software.   (line 1517)
* questions:                             Frequently asked questions.
                                                             (line    6)
* quick reference card:                  Installation.       (line  110)
* random failures:                       Testing.            (line   22)
* Rational Software:                     Related software.   (line 1500)
* re-entrancy:                           Threads.            (line   40)
* read protection:                       Virtual memory.     (line   59)
* REALLOCSTOP:                           Environment.        (line  321)
* recompilation:                         Adding mpatrol.     (line    6)
* recoverable errors:                    Example 1.          (line  257)
* Red Hat:                               Supported systems.  (line  151)
* reference card:                        Installation.       (line  110)
* references:                            References.         (line    6)
* registers:                             Stack memory allocations.
                                                             (line   15)
* related software:                      Related software.   (line    6)
* release builds:                        Foreword.           (line  105)
* removing mpatrol:                      Removing mpatrol.   (line    6)
* reporting bugs:                        Foreword.           (line   42)
* resources:                             References.         (line    6)
* return address:                        Call stacks and symbol tables.
                                                             (line   30)
* RISC:                                  Call stacks and symbol tables.
                                                             (line   59)
* RNGOVF:                                Diagnostic messages.
                                                             (line  480)
* RNGOVL:                                Diagnostic messages.
                                                             (line  513)
* RPM package:                           Installation.       (line  132)
* RSZNUL:                                Diagnostic messages.
                                                             (line  545)
* RSZZER:                                Diagnostic messages.
                                                             (line  565)
* run-time errors:                       Overview.           (line    6)
* running questions:                     Running.            (line    6)
* SAFESIGNALS:                           Environment.        (line  331)
* SBase:                                 Related software.   (line 1535)
* sbrk:                                  Library behaviour.  (line   62)
* SCID:                                  Related software.   (line 1552)
* Scotland:                              About the author.   (line    6)
* SD/UX package:                         Installation.       (line  132)
* sections:                              Static memory allocations.
                                                             (line   14)
* semaphores:                            Threads.            (line   40)
* Sentinel:                              Related software.   (line 1030)
* settings:                              Logging and tracing.
                                                             (line   46)
* setup:                                 Installation.       (line   21)
* severity of errors:                    Example 1.          (line  257)
* SFLAGS:                                Installation.       (line   42)
* shared libraries:                      Call stacks and symbol tables.
                                                             (line   96)
* shared library:                        Features.           (line   30)
* shared memory:                         Threads.            (line    6)
* SHOWALL:                               Environment.        (line  339)
* SHOWFREE:                              Environment.        (line  343)
* SHOWFREED:                             Environment.        (line  349)
* SHOWMAP:                               Environment.        (line  356)
* SHOWSYMBOLS:                           Environment.        (line  361)
* SHOWUNFREED:                           Environment.        (line  368)
* signal handler:                        Example 3.          (line  119)
* signals:                               Features.           (line  287)
* similar programs:                      Related software.   (line    6)
* simulation, trace-driven:              Features.           (line  189)
* single-step:                           Using with a debugger.
                                                             (line   53)
* SINIX, MIPS:                           Supported systems.  (line  295)
* slot tables:                           Improving performance.
                                                             (line   50)
* SMALLBOUND:                            Environment.        (line  375)
* SmartAlloc:                            Related software.   (line 1570)
* SmartHeap:                             Related software.   (line 1588)
* software:                              Related software.   (line    6)
* Software Verification:                 Related software.   (line 1067)
* Solaris malloc libraries:              Related software.   (line 1782)
* Solaris, Intel 80x86:                  Supported systems.  (line  308)
* Solaris, SPARC:                        Supported systems.  (line  314)
* source code documentation:             Installation.       (line  120)
* SourceForge:                           Foreword.           (line   55)
* Spotlight:                             Related software.   (line 1606)
* stack:                                 Stack memory allocations.
                                                             (line   15)
* stack memory allocations:              Stack memory allocations.
                                                             (line    6)
* stack tracebacks:                      Call stacks and symbol tables.
                                                             (line   19)
* stack unwinding:                       Call stacks and symbol tables.
                                                             (line   19)
* StackTrace:                            Related software.   (line 1623)
* static inline:                         Building.           (line  131)
* static memory allocations:             Static memory allocations.
                                                             (line    6)
* statistics:                            Logging and tracing.
                                                             (line   46)
* strace:                                Related software.   (line 1814)
* Stratosware Corporation:               Related software.   (line  960)
* stress testing:                        Improving performance.
                                                             (line  153)
* stripped executable file:              Library behaviour.  (line  109)
* STROVF:                                Diagnostic messages.
                                                             (line  586)
* Subversion:                            Files.              (line   23)
* summary of options:                    Environment.        (line  149)
* supported systems:                     Supported systems.  (line    6)
* SuSE:                                  Supported systems.  (line  225)
* SVR4:                                  Examples.           (line   16)
* swap file:                             Virtual memory.     (line   26)
* swap in:                               Virtual memory.     (line   26)
* swap out:                              Virtual memory.     (line   26)
* swapping:                              Virtual memory.     (line   26)
* symbol summary:                        Logging and tracing.
                                                             (line   56)
* symbol tables:                         Call stacks and symbol tables.
                                                             (line    6)
* symbolic links:                        Installation.       (line   78)
* symbols:                               Call stacks and symbol tables.
                                                             (line    6)
* SYSTEM:                                Building.           (line    6)
* system page size:                      Virtual memory.     (line   14)
* systems:                               Supported systems.  (line    6)
* systems, embedded:                     Operating system support.
                                                             (line    6)
* TAR archive:                           Installation.       (line  132)
* TARGET:                                Building.           (line    6)
* tcsh:                                  The mpatrol command.
                                                             (line   92)
* tentative declarations:                Static memory allocations.
                                                             (line   28)
* test suite:                            Features.           (line  427)
* TestCenter:                            Related software.   (line 1641)
* testing:                               Testing.            (line    6)
* TeXinfo:                               Installation.       (line  110)
* text editor:                           The mpedit command. (line    6)
* TFLAGS:                                Installation.       (line   42)
* Third Degree:                          Related software.   (line 1658)
* thrashing:                             Virtual memory.     (line   38)
* thread-safe library:                   Features.           (line   30)
* threads:                               Threads.            (line    6)
* threads library:                       Threads.            (line   32)
* times:                                 Library performance.
                                                             (line    6)
* tips:                                  Improving performance.
                                                             (line  122)
* tools:                                 Tools.              (line    6)
* TRACE:                                 Environment.        (line  381)
* trace-driven simulation:               Features.           (line  189)
* tracebacks:                            Call stacks and symbol tables.
                                                             (line   19)
* TRACEDIR:                              Environment.        (line  385)
* TRACEFILE:                             Environment.        (line  385)
* tracing:                               Tracing.            (line    6)
* tracing file format:                   Tracing file format.
                                                             (line    6)
* tree structure:                        Example 2.          (line   59)
* Tru64, Alpha:                          Supported systems.  (line  352)
* truss:                                 Related software.   (line 1814)
* TurboPower:                            Related software.   (line 1050)
* tutorial:                              Tutorial.           (line    6)
* type of allocation:                    Example 1.          (line  147)
* undefined symbols:                     Linking.            (line    6)
* underwrites:                           Overwrites and underwrites.
                                                             (line    6)
* unfreed allocations:                   Example 1.          (line  413)
* UNFREEDABORT:                          Environment.        (line  399)
* University of Edinburgh:               About the author.   (line    6)
* UNIX notes:                            UNIX notes.         (line    6)
* UnixWare, Intel 80x86:                 Supported systems.  (line  368)
* updates:                               Foreword.           (line   55)
* USEDEBUG:                              Environment.        (line  410)
* USEMMAP:                               Environment.        (line  421)
* using mpatrol:                         Using mpatrol.      (line    6)
* using with a debugger:                 Using with a debugger.
                                                             (line    6)
* utilities:                             Utilities.          (line    6)
* Valgrind:                              Related software.   (line 1678)
* variable length arrays:                Dynamic memory allocations.
                                                             (line   41)
* variables, file scope:                 Static memory allocations.
                                                             (line    6)
* variables, local static:               Static memory allocations.
                                                             (line    6)
* variables, non-static local:           Stack memory allocations.
                                                             (line    6)
* variables, parameter:                  Stack memory allocations.
                                                             (line    6)
* VAX:                                   Profiling.          (line  545)
* VERSION:                               Files.              (line   54)
* vi:                                    The mpedit command. (line   41)
* vim:                                   The mpedit command. (line   41)
* virtual address:                       Virtual memory.     (line   14)
* virtual memory:                        Virtual memory.     (line    6)
* Virtual Memory Tutorial:               References.         (line  112)
* Vmalloc:                               Related software.   (line 1697)
* warnings:                              Diagnostic messages.
                                                             (line    6)
* warranty:                              Foreword.           (line   22)
* watch points:                          Virtual memory.     (line   71)
* watchmalloc(3x):                       Related software.   (line 1800)
* Windows notes:                         Windows notes.      (line    6)
* Windows Services for UNIX:             Supported systems.  (line  119)
* Windows symbols setup:                 Linking.            (line   46)
* Windows, Intel 80x86:                  Supported systems.  (line  444)
* WinSite:                               Installation.       (line  143)
* Wipeout:                               Related software.   (line 1714)
* write protection:                      Virtual memory.     (line   59)
* X Windows:                             Tracing.            (line   90)
* XANALYS Software Tools:                References.         (line   89)
* XCOFF:                                 Examples.           (line   26)
* xemacs:                                The mpedit command. (line   41)
* xmem:                                  Tracing.            (line  409)
* YaMa:                                  Related software.   (line 1730)
* YAMD (Yet Another Malloc Debugger):    Related software.   (line 1747)
* ZERALN:                                Diagnostic messages.
                                                             (line  613)
* ZeroFault:                             Related software.   (line 1765)
* ZEROPN:                                Diagnostic messages.
                                                             (line  632)
* ZIP archive:                           Installation.       (line  132)


