                            INSTALL
   
   All the files are built on Windows using MSYS and MinGW. The files also
build on linux and variants with little modification. 

  Attempts are made to disconnect any single toolchain from the dependency 
list. Will build with gcc / MSYS/ MinGW, gcc / Linux, will build (partially) 
with MSVC.

   Most of the excutables are built with static libraries, so no external
dependencies are needed. This will aid in authentication, as the single 
excutable file contains all executable code, thus the checksum of the 
executable checks the whole toolchain.
  
  BUILD
  
  The usual ./configure  make cycle should work. However if you checked 
  the source out from github, some file timestamps may have been altered.
  The autoconf system thinks it is time for a rebuild. The message looks
  something like:
  
  WARNING: 'automake-1.15' is missing on your system.
 
  One can avoid installing autoconf by issuing the following command(s):
  
  touch --date="`date`" aclocal.m4 Makefile.am configure Makefile.in
  
  or execute the ./noauto.sh shell script   ...
  
  or simply install autoconf (autotools).
  
  The Makefile has the usual targets. Th command 'make' will build the 
  whole project, 'make tests' will check workings. The tests are producing 
  outputs that is matched to the expected output. The compare is done wit the 
 'diff' utility. It passes if the diffs remain silent. (no diferences)

  DEPENDENCIES
  
  The following subsystems are used in DigiBank  (DIBA):
                       
  MinGW, MSYS2, (in Win32/Win64) gcc, diffutils
  libgcrypt, libgcrypt-devel Python,
  PyGTK, PyGobject, zlib zlib-devel
  (others, see Makefile for a technically accurate list)
  
On MSYS2, one can install the dependency with:
    pacman -S <depenency list>
    
MSYS2 examples:
    pacman -S libgcrypt libgcrypt-devel 
    pacman -S zlib zlib-devel
    (see: getdeps.sh)
    
  On linux and family, use the appropriate package manager 
  like 'yum' or 'apt'.

Linux examples (zlib):

    32-bit Debian or Ubuntu : apt-get install zlib1g-dev
    64-bit Debian or Ubuntu : apt-get install zlib1g:i386 (or lib32z1)
    32/64-bit Fedora : dnf install zlib.i686.

Linux examples (gcrypt):

    Debian or Ubuntu: sudo apt install libgcrypt20-dev

  CHOICES
  
   The choices we made on platforms and utilities are a hybrid of POSIX and Win32
and heavy on open source.  We used the POSIX platform for its rich computing 
capability, and the Win32 (Win64) for its rich user interface.

  STRUCTURE
  
   The project was broken up into sub modules, and has the following structure:
   
   o transport   --  Asymmetric encryption for client / server transport
   o keygen      --  Key generation related routines
   o bluepoint   --  Symmetric cypher for encryption / decryption tasks
   o currency    --  Currency and currency related transactions
   o chest       --  Account related tools
   o server      --  The transaction approval server
   o blockchain  --  Blockchain related utilities
   o audit       --  Auditing related 
   o gui         --  User interface to tie all parts together
   o tools       --  Various support tools, cmdline, base64, malloc etc ... 
   o common      --  Common items and defines for the DIBA project
   o voting      --  Voting related subsystem
   o study       --  Disregard, contains misc. investigations 
   
  DATA
  
    Customer data is stored (for development) in the 
                ../data/customers subdirectory
    Currency data is stored in the 
                ../data/currency subdirectory        
    Transaction data is stored in the 
                ../data/transact subdirectory        
    Audit data is stored in the 
                ../data/audit subdirectory        
    Voting data is stored in the 
                ../data/voting subdirectory        
  
  
# EOF






